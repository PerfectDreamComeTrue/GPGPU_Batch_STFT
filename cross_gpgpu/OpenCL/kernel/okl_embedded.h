
#pragma once
//generated with python code
#include <string>
class okl_embed {
    public:
    #ifndef NO_EMBEDDED_okl
std::string rnel __attribute__ = 
	"#pragma OPENCL EXTENSION cl_khr_fp64 : enable\n"
	"\n"
	"typedef struct complex_t {\n"
	"  float real, imag;\n"
	"} complex;\n"
	"\n"
	"typedef struct pairs_t {\n"
	"  unsigned int first, second;\n"
	"} pairs;\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size);\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size) {\n"
	"  float normalized_index = (float) index;\n"
	"  normalized_index /= ((float) (window_size - 1));\n"
	"  float angle = 2.0f * M_PI * normalized_index;\n"
	"  return 0.5f * (1.0f - cos(angle));\n"
	"}\n"
	"\n"
	"inline int reverseBits(int num,\n"
	"                       int radix_2_data);\n"
	"\n"
	"inline int reverseBits(int num,\n"
	"                       int radix_2_data) {\n"
	"  int reversed = 0;\n"
	"  for (int i = 0; i < radix_2_data; ++i) {\n"
	"    reversed = (reversed << 1) | (num & 1);\n"
	"    num >>= 1;\n"
	"  }\n"
	"  return reversed;\n"
	"}\n"
	"\n"
	"pairs indexer(const unsigned int ID,\n"
	"              const int powed_stage);\n"
	"\n"
	"pairs indexer(const unsigned int ID,\n"
	"              const int powed_stage) {\n"
	"  pairs temp;\n"
	"  temp.first = ID + (ID & (~(powed_stage - 1)));\n"
	"  temp.second = temp.first + powed_stage;\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"int calculateK(int windowIDX,\n"
	"               int powed_stage,\n"
	"               int windowSize);\n"
	"\n"
	"int calculateK(int windowIDX,\n"
	"               int powed_stage,\n"
	"               int windowSize) {\n"
	"  int position = windowIDX;\n"
	"  // 그룹 내에서의 위치\n"
	"  int k = (position * windowSize) / powed_stage;\n"
	"  return k;\n"
	"}\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize);\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize) {\n"
	"  complex temp;\n"
	"  float angle = -2.0 * M_PI * ((float) k / (float) windowSize);\n"
	"  temp.real = cos(angle);\n"
	"  temp.imag = sin(angle);\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"inline complex cmult(const complex a,\n"
	"                     const complex b);\n"
	"\n"
	"inline complex cmult(const complex a,\n"
	"                     const complex b) {\n"
	"  complex result;\n"
	"  result.real = a.real * b.real - a.imag * b.imag;\n"
	"  result.imag = a.real * b.imag + a.imag * b.real;\n"
	"  return result;\n"
	"}\n"
	"\n"
	"inline complex cadd(complex a,\n"
	"                    const complex b);\n"
	"\n"
	"inline complex cadd(complex a,\n"
	"                    const complex b) {\n"
	"  a.real += b.real;\n"
	"  a.imag += b.imag;\n"
	"  return a;\n"
	"}\n"
	"\n"
	"inline complex csub(complex a,\n"
	"                    const complex b);\n"
	"\n"
	"inline complex csub(complex a,\n"
	"                    const complex b) {\n"
	"  a.real -= b.real;\n"
	"  a.imag -= b.imag;\n"
	"  return a;\n"
	"}\n"
	"\n"
	"inline float cmod(complex a);\n"
	"\n"
	"inline float cmod(complex a) {\n"
	"  return (sqrt(\n"
	"    a.real * a.real + a.imag * a.imag\n"
	"  ));\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_removeDC_0(__global complex * buffer,\n"
	"                       unsigned int OFullSize,\n"
	"                       __global float * qt_buffer,\n"
	"                       int windowSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_removeDC_0(__global complex * buffer,\n"
	"                       unsigned int OFullSize,\n"
	"                       __global float * qt_buffer,\n"
	"                       int windowSize) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int IDX = o_itr + i_itr;\n"
	"      qt_buffer[IDX / windowSize] += buffer[IDX].imag;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_removeDC_1(__global complex * buffer,\n"
	"                       unsigned int OFullSize,\n"
	"                       __global float * qt_buffer,\n"
	"                       int windowSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_removeDC_1(__global complex * buffer,\n"
	"                       unsigned int OFullSize,\n"
	"                       __global float * qt_buffer,\n"
	"                       int windowSize) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int IDX = o_itr + i_itr;\n"
	"      buffer[IDX].imag -= (qt_buffer[IDX / windowSize] / (float) windowSize);\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_overlap_N_window_0(__global float * in,\n"
	"                               __global complex * buffer,\n"
	"                               unsigned int fullSize,\n"
	"                               const unsigned int OFullSize,\n"
	"                               const int windowSize,\n"
	"                               unsigned int OMove);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_overlap_N_window_0(__global float * in,\n"
	"                               __global complex * buffer,\n"
	"                               unsigned int fullSize,\n"
	"                               const unsigned int OFullSize,\n"
	"                               const int windowSize,\n"
	"                               unsigned int OMove) {\n"
	"  {\n"
	"    unsigned int w_num = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int w_itr = 0 + get_local_id(0);\n"
	"      unsigned int FID = w_num + w_itr;\n"
	"      unsigned int read_point = (int) ((FID) / windowSize) * OMove + ((FID) % windowSize);\n"
	"      buffer[FID].imag = read_point >= fullSize ? 0.0 : in[read_point] * window_func(\n"
	"        (FID) % windowSize,\n"
	"        windowSize\n"
	"      );\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_bitReverse_0(__global complex * buffer,\n"
	"                         const unsigned int OFullSize,\n"
	"                         int windowSize,\n"
	"                         int radixData);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_bitReverse_0(__global complex * buffer,\n"
	"                         const unsigned int OFullSize,\n"
	"                         int windowSize,\n"
	"                         int radixData) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int w_itr = 0 + get_local_id(0);\n"
	"      unsigned int dst_idx = reverseBits((o_itr + w_itr % windowSize), radixData);\n"
	"      unsigned int BID = o_itr + w_itr - ((o_itr + w_itr) % windowSize) + dst_idx;\n"
	"      buffer[BID].real = buffer[o_itr + w_itr].imag;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_endPreProcess_0(__global complex * buffer,\n"
	"                            const unsigned int OFullSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_endPreProcess_0(__global complex * buffer,\n"
	"                            const unsigned int OFullSize) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      buffer[o_itr + i_itr].imag = 0.0;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"\n"
	"// quot = (fullSize / overlap_ratio) / overlap_ratio / window_size\n"
	"//calculateK(int low_in_window, int powed_stage, int windowSize)\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Butterfly_0(__global complex * buffer,\n"
	"                        int windowSize,\n"
	"                        const int powed_stage,\n"
	"                        const unsigned int OHalfSize,\n"
	"                        int radixData);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Butterfly_0(__global complex * buffer,\n"
	"                        int windowSize,\n"
	"                        const int powed_stage,\n"
	"                        const unsigned int OHalfSize,\n"
	"                        int radixData) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int GID = o_itr + i_itr;\n"
	"      pairs butterfly_target = indexer(GID, powed_stage);\n"
	"      // 12 34 56 78\n"
	"      //(windowSize/powed_stage)\n"
	"      int k = (GID % powed_stage) * (windowSize / (2 * powed_stage));\n"
	"      //(GID%powed_stage) * (windowSize / powed_stage);\n"
	"      complex this_twiddle = twiddle(k, windowSize);\n"
	"      complex tempcplx = cmult(\n"
	"        buffer[butterfly_target.second],\n"
	"        this_twiddle\n"
	"      );\n"
	"      complex tempx = cadd(buffer[butterfly_target.first], tempcplx);\n"
	"      complex tempy = csub(buffer[butterfly_target.first], tempcplx);\n"
	"      buffer[butterfly_target.first] = tempx;\n"
	"      buffer[butterfly_target.second] = tempy;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_toPower_0(__global complex * buffer,\n"
	"                      __global float * out,\n"
	"                      const unsigned int OHalfSize,\n"
	"                      int windowRadix);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_toPower_0(__global complex * buffer,\n"
	"                      __global float * out,\n"
	"                      const unsigned int OHalfSize,\n"
	"                      int windowRadix) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      const unsigned int GID = o_itr + i_itr;\n"
	"      unsigned int BID = (GID >> (windowRadix - 1)) * (1 << windowRadix) + (GID & ((1 << (windowRadix - 1)) - 1));\n"
	"      float powered = cmod(buffer[BID]);\n"
	"      //powered = log10(powered);\n"
	"      out[GID] = powered;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	;
#endif
#ifdef NO_EMBEDDED_okl
std::string rnel __attribute__ = 
	"/compiled_code.cl\n"
	;
#endif

};