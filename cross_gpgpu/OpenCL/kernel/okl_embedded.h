
#pragma once
//generated with python code
#include <string>
class okl_embed {
    public:
    std::string radix13 = 
	"#pragma OPENCL EXTENSION cl_khr_fp64 : enable\n"
	"\n"
	"#include <math.h>\n"
	"#include <cstdio>\n"
	"\n"
	"typedef struct complex_t {\n"
	"  float real, imag;\n"
	"} complex;\n"
	"\n"
	"typedef struct pairs_t {\n"
	"  unsigned int first, second;\n"
	"} pairs;\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size);\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size) {\n"
	"  float normalized_index = (float) index;\n"
	"  normalized_index /= ((float) (window_size - 1));\n"
	"  float angle = 2.0f * M_PI * normalized_index;\n"
	"  return 0.5f * (1.0f - cos(angle));\n"
	"}\n"
	"\n"
	"inline int reverseBits(int num,\n"
	"                       int radix_2_data);\n"
	"\n"
	"inline int reverseBits(int num,\n"
	"                       int radix_2_data) {\n"
	"  int reversed = 0;\n"
	"  for (int i = 0; i < radix_2_data; ++i) {\n"
	"    reversed = (reversed << 1) | (num & 1);\n"
	"    num >>= 1;\n"
	"  }\n"
	"  return reversed;\n"
	"}\n"
	"\n"
	"pairs indexer(const unsigned int firstMaximumID,\n"
	"              const int powed_stage);\n"
	"\n"
	"pairs indexer(const unsigned int firstMaximumID,\n"
	"              const int powed_stage) {\n"
	"  pairs temp;\n"
	"  temp.first = firstMaximumID + (firstMaximumID & (~(powed_stage - 1)));\n"
	"  temp.second = temp.first + powed_stage;\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"inline int segmentK(const int lsave,\n"
	"                    const int segmentSize,\n"
	"                    const int HwindowSize);\n"
	"\n"
	"inline int segmentK(const int lsave,\n"
	"                    const int segmentSize,\n"
	"                    const int HwindowSize) {\n"
	"  return ((lsave % segmentSize) * HwindowSize) / segmentSize;\n"
	"}\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize);\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize) {\n"
	"  complex temp;\n"
	"  float angle = -2.0 * M_PI * ((float) k / (float) windowSize);\n"
	"  temp.real = cos(angle);\n"
	"  temp.imag = sin(angle);\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"inline complex cmult(const complex a,\n"
	"                     const complex b);\n"
	"\n"
	"inline complex cmult(const complex a,\n"
	"                     const complex b) {\n"
	"  complex result;\n"
	"  result.real = a.real * b.real - a.imag * b.imag;\n"
	"  result.imag = a.real * b.imag + a.imag * b.real;\n"
	"  return result;\n"
	"}\n"
	"\n"
	"inline float RMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib);\n"
	"\n"
	"inline float RMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib) {\n"
	"  return (Ra * Rb) - (Ia * Ib);\n"
	"}\n"
	"\n"
	"inline float IMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib);\n"
	"\n"
	"inline float IMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib) {\n"
	"  return (Ra * Rb) + (Ia * Ib);\n"
	"}\n"
	"\n"
	"inline complex cadd(complex a,\n"
	"                    const complex b);\n"
	"\n"
	"inline complex cadd(complex a,\n"
	"                    const complex b) {\n"
	"  a.real += b.real;\n"
	"  a.imag += b.imag;\n"
	"  return a;\n"
	"}\n"
	"\n"
	"inline complex csub(complex a,\n"
	"                    const complex b);\n"
	"\n"
	"inline complex csub(complex a,\n"
	"                    const complex b) {\n"
	"  a.real -= b.real;\n"
	"  a.imag -= b.imag;\n"
	"  return a;\n"
	"}\n"
	"\n"
	"inline float cmod(complex a);\n"
	"\n"
	"inline float cmod(complex a) {\n"
	"  return (sqrt(\n"
	"    a.real * a.real + a.imag * a.imag\n"
	"  ));\n"
	"}\n"
	"\n"
	"inline void DaCAdd(const int i_itr,\n"
	"                   const unsigned int Half,\n"
	"                   complex windowAdded[]);\n"
	"\n"
	"inline void DaCAdd(const int i_itr,\n"
	"                   const unsigned int Half,\n"
	"                   complex windowAdded[]) {\n"
	"  unsigned int inRange = i_itr < Half;\n"
	"  float Dpoint = windowAdded[i_itr].imag;\n"
	"  float Apoint = windowAdded[i_itr + (Half * inRange)].imag;\n"
	"  windowAdded[i_itr].imag = (Dpoint + Apoint) * inRange;\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_overlap_N_window_0(__global float * in,\n"
	"                               __global complex * buffer,\n"
	"                               const unsigned int fullSize,\n"
	"                               const unsigned int OFullSize,\n"
	"                               const int windowSize,\n"
	"                               const unsigned int OMove);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_overlap_N_window_0(__global float * in,\n"
	"                               __global complex * buffer,\n"
	"                               const unsigned int fullSize,\n"
	"                               const unsigned int OFullSize,\n"
	"                               const int windowSize,\n"
	"                               const unsigned int OMove) {\n"
	"  {\n"
	"    unsigned int w_num = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int w_itr = 0 + get_local_id(0);\n"
	"      unsigned int FID = w_num + w_itr;\n"
	"      unsigned int read_point = (unsigned int) ((FID) / windowSize) * OMove + ((FID) % windowSize);\n"
	"\n"
	"      buffer[FID].real = read_point >= fullSize ? 0.0 : in[read_point];\n"
	"      // * window_func((FID) % windowSize, windowSize);\n"
	"      buffer[FID].imag = 0.0;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_bitReverse_temp_0(__global complex * buffer,\n"
	"                              __global complex * result,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const int windowSize,\n"
	"                              const int radixData);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_bitReverse_temp_0(__global complex * buffer,\n"
	"                              __global complex * result,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const int windowSize,\n"
	"                              const int radixData) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int w_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = (o_itr + w_itr);\n"
	"      unsigned int Lidx = (Gidx % windowSize);\n"
	"      unsigned int dst_idx = reverseBits(Lidx, radixData);\n"
	"      unsigned int BID = Gidx - Lidx + dst_idx;\n"
	"      result[BID] = buffer[Gidx];\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Butterfly_0(__global complex * buffer,\n"
	"                        const int windowSize,\n"
	"                        const int powed_stage,\n"
	"                        const unsigned int OHalfSize,\n"
	"                        const int radixData);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Butterfly_0(__global complex * buffer,\n"
	"                        const int windowSize,\n"
	"                        const int powed_stage,\n"
	"                        const unsigned int OHalfSize,\n"
	"                        const int radixData) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int GID = o_itr + i_itr;\n"
	"      pairs butterfly_target = indexer(GID, powed_stage);\n"
	"      int k = (GID % powed_stage) * (windowSize / (2 * powed_stage));\n"
	"      //(GID%powed_stage) * (windowSize / powed_stage);\n"
	"      complex this_twiddle = twiddle(k, windowSize);\n"
	"      complex first = buffer[butterfly_target.first];\n"
	"      complex second = buffer[butterfly_target.second];\n"
	"      complex tempx = cadd(first, second);\n"
	"      complex tempy = csub(first, second);\n"
	"      tempy = cmult(tempy, this_twiddle);\n"
	"      buffer[butterfly_target.first] = tempx;\n"
	"      buffer[butterfly_target.second] = tempy;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_toPower_0(__global complex * buffer,\n"
	"                      __global float * out,\n"
	"                      const unsigned int OHalfSize,\n"
	"                      const int windowRadix);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_toPower_0(__global complex * buffer,\n"
	"                      __global float * out,\n"
	"                      const unsigned int OHalfSize,\n"
	"                      const int windowRadix) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      const unsigned int GID = o_itr + i_itr;\n"
	"      unsigned int BID = (GID >> (windowRadix - 1)) * (1 << windowRadix) + (GID & ((1 << (windowRadix - 1)) - 1));\n"
	"      float powered = cmod(buffer[BID]);\n"
	"      //powered = log10(powered);\n"
	"      out[GID] = powered;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_13_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_13_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut) {\n"
	"  __local float windowAdded[4096];\n"
	"  __local complex windowBuffer[8192];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + get_group_id(0);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 4096;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 4096].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 4096].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 4096;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 4096].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 4096].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 4096;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 4096].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 4096].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 4096;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 4096].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 4096].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (4096)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (4096)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (4096)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (4096)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 8192.0);\n"
	"      windowBuffer[i_itr + 4096].real -= (windowAdded[0] / 8192.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 8192);\n"
	"      windowBuffer[i_itr + 4096].real *= window_func(i_itr + 4096, 8192);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 8192.0);\n"
	"      windowBuffer[i_itr + 4096].real -= (windowAdded[0] / 8192.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 8192);\n"
	"      windowBuffer[i_itr + 4096].real *= window_func(i_itr + 4096, 8192);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 8192.0);\n"
	"      windowBuffer[i_itr + 4096].real -= (windowAdded[0] / 8192.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 8192);\n"
	"      windowBuffer[i_itr + 4096].real *= window_func(i_itr + 4096, 8192);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 8192.0);\n"
	"      windowBuffer[i_itr + 4096].real -= (windowAdded[0] / 8192.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 8192);\n"
	"      windowBuffer[i_itr + 4096].real *= window_func(i_itr + 4096, 8192);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      bufferOut[o_itr * 8192 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 8192 + i_itr + 4096] = windowBuffer[i_itr + 4096];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      bufferOut[o_itr * 8192 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 8192 + i_itr + 4096] = windowBuffer[i_itr + 4096];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      bufferOut[o_itr * 8192 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 8192 + i_itr + 4096] = windowBuffer[i_itr + 4096];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      bufferOut[o_itr * 8192 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 8192 + i_itr + 4096] = windowBuffer[i_itr + 4096];\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized13_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized13_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize) {\n"
	"  __local complex SBank[8192];\n"
	"  __local complex FBank[8192];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (4096 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 4096), 8192);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 4096];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 4096] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 4096), 8192);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 4096];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 4096] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 4096), 8192);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 4096];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 4096] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 4096), 8192);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 4096];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 4096] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW13_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW13_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut) {\n"
	"  __local float windowAdded[4096];\n"
	"  __local complex SBank[8192];\n"
	"  __local complex FBank[8192];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (4096 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 12;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 4096;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 4096].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 4096].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 12;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 4096;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 4096].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 4096].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 12;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 4096;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 4096].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 4096].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 12;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 4096;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 4096].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 4096].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (4096)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (4096)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (4096)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (4096)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 8192.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 8192);\n"
	"      FBank[i_itr + 4096].real -= (windowAdded[0] / 8192.0);\n"
	"      FBank[i_itr + 4096].real *= window_func(i_itr + 4096, 8192);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 8192.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 8192);\n"
	"      FBank[i_itr + 4096].real -= (windowAdded[0] / 8192.0);\n"
	"      FBank[i_itr + 4096].real *= window_func(i_itr + 4096, 8192);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 8192.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 8192);\n"
	"      FBank[i_itr + 4096].real -= (windowAdded[0] / 8192.0);\n"
	"      FBank[i_itr + 4096].real *= window_func(i_itr + 4096, 8192);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 8192.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 8192);\n"
	"      FBank[i_itr + 4096].real -= (windowAdded[0] / 8192.0);\n"
	"      FBank[i_itr + 4096].real *= window_func(i_itr + 4096, 8192);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 4096), 8192);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 4096), 8192);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 4096), 8192);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 4096), 8192);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	;
std::string radix12 = 
	"#pragma OPENCL EXTENSION cl_khr_fp64 : enable\n"
	"\n"
	"#include <math.h>\n"
	"#include <cstdio>\n"
	"\n"
	"typedef struct complex_t {\n"
	"  float real, imag;\n"
	"} complex;\n"
	"\n"
	"typedef struct pairs_t {\n"
	"  unsigned int first, second;\n"
	"} pairs;\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size);\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size) {\n"
	"  float normalized_index = (float) index;\n"
	"  normalized_index /= ((float) (window_size - 1));\n"
	"  float angle = 2.0f * M_PI * normalized_index;\n"
	"  return 0.5f * (1.0f - cos(angle));\n"
	"}\n"
	"\n"
	"inline int reverseBits(int num,\n"
	"                       int radix_2_data);\n"
	"\n"
	"inline int reverseBits(int num,\n"
	"                       int radix_2_data) {\n"
	"  int reversed = 0;\n"
	"  for (int i = 0; i < radix_2_data; ++i) {\n"
	"    reversed = (reversed << 1) | (num & 1);\n"
	"    num >>= 1;\n"
	"  }\n"
	"  return reversed;\n"
	"}\n"
	"\n"
	"pairs indexer(const unsigned int firstMaximumID,\n"
	"              const int powed_stage);\n"
	"\n"
	"pairs indexer(const unsigned int firstMaximumID,\n"
	"              const int powed_stage) {\n"
	"  pairs temp;\n"
	"  temp.first = firstMaximumID + (firstMaximumID & (~(powed_stage - 1)));\n"
	"  temp.second = temp.first + powed_stage;\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"inline int segmentK(const int lsave,\n"
	"                    const int segmentSize,\n"
	"                    const int HwindowSize);\n"
	"\n"
	"inline int segmentK(const int lsave,\n"
	"                    const int segmentSize,\n"
	"                    const int HwindowSize) {\n"
	"  return ((lsave % segmentSize) * HwindowSize) / segmentSize;\n"
	"}\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize);\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize) {\n"
	"  complex temp;\n"
	"  float angle = -2.0 * M_PI * ((float) k / (float) windowSize);\n"
	"  temp.real = cos(angle);\n"
	"  temp.imag = sin(angle);\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"inline complex cmult(const complex a,\n"
	"                     const complex b);\n"
	"\n"
	"inline complex cmult(const complex a,\n"
	"                     const complex b) {\n"
	"  complex result;\n"
	"  result.real = a.real * b.real - a.imag * b.imag;\n"
	"  result.imag = a.real * b.imag + a.imag * b.real;\n"
	"  return result;\n"
	"}\n"
	"\n"
	"inline float RMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib);\n"
	"\n"
	"inline float RMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib) {\n"
	"  return (Ra * Rb) - (Ia * Ib);\n"
	"}\n"
	"\n"
	"inline float IMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib);\n"
	"\n"
	"inline float IMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib) {\n"
	"  return (Ra * Rb) + (Ia * Ib);\n"
	"}\n"
	"\n"
	"inline complex cadd(complex a,\n"
	"                    const complex b);\n"
	"\n"
	"inline complex cadd(complex a,\n"
	"                    const complex b) {\n"
	"  a.real += b.real;\n"
	"  a.imag += b.imag;\n"
	"  return a;\n"
	"}\n"
	"\n"
	"inline complex csub(complex a,\n"
	"                    const complex b);\n"
	"\n"
	"inline complex csub(complex a,\n"
	"                    const complex b) {\n"
	"  a.real -= b.real;\n"
	"  a.imag -= b.imag;\n"
	"  return a;\n"
	"}\n"
	"\n"
	"inline float cmod(complex a);\n"
	"\n"
	"inline float cmod(complex a) {\n"
	"  return (sqrt(\n"
	"    a.real * a.real + a.imag * a.imag\n"
	"  ));\n"
	"}\n"
	"\n"
	"inline void DaCAdd(const int i_itr,\n"
	"                   const unsigned int Half,\n"
	"                   complex windowAdded[]);\n"
	"\n"
	"inline void DaCAdd(const int i_itr,\n"
	"                   const unsigned int Half,\n"
	"                   complex windowAdded[]) {\n"
	"  unsigned int inRange = i_itr < Half;\n"
	"  float Dpoint = windowAdded[i_itr].imag;\n"
	"  float Apoint = windowAdded[i_itr + (Half * inRange)].imag;\n"
	"  windowAdded[i_itr].imag = (Dpoint + Apoint) * inRange;\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_overlap_N_window_0(__global float * in,\n"
	"                               __global complex * buffer,\n"
	"                               const unsigned int fullSize,\n"
	"                               const unsigned int OFullSize,\n"
	"                               const int windowSize,\n"
	"                               const unsigned int OMove);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_overlap_N_window_0(__global float * in,\n"
	"                               __global complex * buffer,\n"
	"                               const unsigned int fullSize,\n"
	"                               const unsigned int OFullSize,\n"
	"                               const int windowSize,\n"
	"                               const unsigned int OMove) {\n"
	"  {\n"
	"    unsigned int w_num = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int w_itr = 0 + get_local_id(0);\n"
	"      unsigned int FID = w_num + w_itr;\n"
	"      unsigned int read_point = (unsigned int) ((FID) / windowSize) * OMove + ((FID) % windowSize);\n"
	"\n"
	"      buffer[FID].real = read_point >= fullSize ? 0.0 : in[read_point];\n"
	"      // * window_func((FID) % windowSize, windowSize);\n"
	"      buffer[FID].imag = 0.0;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_bitReverse_temp_0(__global complex * buffer,\n"
	"                              __global complex * result,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const int windowSize,\n"
	"                              const int radixData);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_bitReverse_temp_0(__global complex * buffer,\n"
	"                              __global complex * result,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const int windowSize,\n"
	"                              const int radixData) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int w_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = (o_itr + w_itr);\n"
	"      unsigned int Lidx = (Gidx % windowSize);\n"
	"      unsigned int dst_idx = reverseBits(Lidx, radixData);\n"
	"      unsigned int BID = Gidx - Lidx + dst_idx;\n"
	"      result[BID] = buffer[Gidx];\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Butterfly_0(__global complex * buffer,\n"
	"                        const int windowSize,\n"
	"                        const int powed_stage,\n"
	"                        const unsigned int OHalfSize,\n"
	"                        const int radixData);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Butterfly_0(__global complex * buffer,\n"
	"                        const int windowSize,\n"
	"                        const int powed_stage,\n"
	"                        const unsigned int OHalfSize,\n"
	"                        const int radixData) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int GID = o_itr + i_itr;\n"
	"      pairs butterfly_target = indexer(GID, powed_stage);\n"
	"      int k = (GID % powed_stage) * (windowSize / (2 * powed_stage));\n"
	"      //(GID%powed_stage) * (windowSize / powed_stage);\n"
	"      complex this_twiddle = twiddle(k, windowSize);\n"
	"      complex first = buffer[butterfly_target.first];\n"
	"      complex second = buffer[butterfly_target.second];\n"
	"      complex tempx = cadd(first, second);\n"
	"      complex tempy = csub(first, second);\n"
	"      tempy = cmult(tempy, this_twiddle);\n"
	"      buffer[butterfly_target.first] = tempx;\n"
	"      buffer[butterfly_target.second] = tempy;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_toPower_0(__global complex * buffer,\n"
	"                      __global float * out,\n"
	"                      const unsigned int OHalfSize,\n"
	"                      const int windowRadix);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_toPower_0(__global complex * buffer,\n"
	"                      __global float * out,\n"
	"                      const unsigned int OHalfSize,\n"
	"                      const int windowRadix) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      const unsigned int GID = o_itr + i_itr;\n"
	"      unsigned int BID = (GID >> (windowRadix - 1)) * (1 << windowRadix) + (GID & ((1 << (windowRadix - 1)) - 1));\n"
	"      float powered = cmod(buffer[BID]);\n"
	"      //powered = log10(powered);\n"
	"      out[GID] = powered;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_12_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_12_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut) {\n"
	"  __local complex windowBuffer[4096];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + get_group_id(0);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 2048;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 2048].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 2048].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 2048;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 2048].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 2048].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (2048)].real;\n"
	"      windowBuffer[i_itr].imag = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (2048)].real;\n"
	"      windowBuffer[i_itr].imag = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowBuffer);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowBuffer[0].imag / 4096.0);\n"
	"      windowBuffer[i_itr + 2048].real -= (windowBuffer[0].imag / 4096.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 4096);\n"
	"      windowBuffer[i_itr + 2048].real *= window_func(i_itr + 2048, 4096);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowBuffer[0].imag / 4096.0);\n"
	"      windowBuffer[i_itr + 2048].real -= (windowBuffer[0].imag / 4096.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 4096);\n"
	"      windowBuffer[i_itr + 2048].real *= window_func(i_itr + 2048, 4096);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 2048].imag = 0;\n"
	"      bufferOut[o_itr * 4096 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 4096 + i_itr + 2048] = windowBuffer[i_itr + 2048];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 2048].imag = 0;\n"
	"      bufferOut[o_itr * 4096 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 4096 + i_itr + 2048] = windowBuffer[i_itr + 2048];\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized12_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized12_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize) {\n"
	"  __local complex SBank[4096];\n"
	"  __local complex FBank[4096];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (2048 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 2048), 4096);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 2048];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 2048] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 2048), 4096);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 2048];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 2048] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW12_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW12_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut) {\n"
	"  __local complex SBank[4096];\n"
	"  __local complex FBank[4096];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (2048 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 11;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 2048;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 2048].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 2048].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 11;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 2048;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 2048].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 2048].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (2048)].real;\n"
	"      FBank[i_itr].imag = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (2048)].real;\n"
	"      FBank[i_itr].imag = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, FBank);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (FBank[0].imag / 4096.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 4096);\n"
	"      FBank[i_itr + 2048].real -= (FBank[0].imag / 4096.0);\n"
	"      FBank[i_itr + 2048].real *= window_func(i_itr + 2048, 4096);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (FBank[0].imag / 4096.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 4096);\n"
	"      FBank[i_itr + 2048].real -= (FBank[0].imag / 4096.0);\n"
	"      FBank[i_itr + 2048].real *= window_func(i_itr + 2048, 4096);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 2048), 4096);\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 2048].imag = 0;\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 2048), 4096);\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 2048].imag = 0;\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	;
std::string radix15 = 
	"#pragma OPENCL EXTENSION cl_khr_fp64 : enable\n"
	"\n"
	"#include <math.h>\n"
	"#include <cstdio>\n"
	"\n"
	"typedef struct complex_t {\n"
	"  float real, imag;\n"
	"} complex;\n"
	"\n"
	"typedef struct pairs_t {\n"
	"  unsigned int first, second;\n"
	"} pairs;\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size);\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size) {\n"
	"  float normalized_index = (float) index;\n"
	"  normalized_index /= ((float) (window_size - 1));\n"
	"  float angle = 2.0f * M_PI * normalized_index;\n"
	"  return 0.5f * (1.0f - cos(angle));\n"
	"}\n"
	"\n"
	"inline int reverseBits(int num,\n"
	"                       int radix_2_data);\n"
	"\n"
	"inline int reverseBits(int num,\n"
	"                       int radix_2_data) {\n"
	"  int reversed = 0;\n"
	"  for (int i = 0; i < radix_2_data; ++i) {\n"
	"    reversed = (reversed << 1) | (num & 1);\n"
	"    num >>= 1;\n"
	"  }\n"
	"  return reversed;\n"
	"}\n"
	"\n"
	"pairs indexer(const unsigned int firstMaximumID,\n"
	"              const int powed_stage);\n"
	"\n"
	"pairs indexer(const unsigned int firstMaximumID,\n"
	"              const int powed_stage) {\n"
	"  pairs temp;\n"
	"  temp.first = firstMaximumID + (firstMaximumID & (~(powed_stage - 1)));\n"
	"  temp.second = temp.first + powed_stage;\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"inline int segmentK(const int lsave,\n"
	"                    const int segmentSize,\n"
	"                    const int HwindowSize);\n"
	"\n"
	"inline int segmentK(const int lsave,\n"
	"                    const int segmentSize,\n"
	"                    const int HwindowSize) {\n"
	"  return ((lsave % segmentSize) * HwindowSize) / segmentSize;\n"
	"}\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize);\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize) {\n"
	"  complex temp;\n"
	"  float angle = -2.0 * M_PI * ((float) k / (float) windowSize);\n"
	"  temp.real = cos(angle);\n"
	"  temp.imag = sin(angle);\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"inline complex cmult(const complex a,\n"
	"                     const complex b);\n"
	"\n"
	"inline complex cmult(const complex a,\n"
	"                     const complex b) {\n"
	"  complex result;\n"
	"  result.real = a.real * b.real - a.imag * b.imag;\n"
	"  result.imag = a.real * b.imag + a.imag * b.real;\n"
	"  return result;\n"
	"}\n"
	"\n"
	"inline float RMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib);\n"
	"\n"
	"inline float RMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib) {\n"
	"  return (Ra * Rb) - (Ia * Ib);\n"
	"}\n"
	"\n"
	"inline float IMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib);\n"
	"\n"
	"inline float IMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib) {\n"
	"  return (Ra * Rb) + (Ia * Ib);\n"
	"}\n"
	"\n"
	"inline complex cadd(complex a,\n"
	"                    const complex b);\n"
	"\n"
	"inline complex cadd(complex a,\n"
	"                    const complex b) {\n"
	"  a.real += b.real;\n"
	"  a.imag += b.imag;\n"
	"  return a;\n"
	"}\n"
	"\n"
	"inline complex csub(complex a,\n"
	"                    const complex b);\n"
	"\n"
	"inline complex csub(complex a,\n"
	"                    const complex b) {\n"
	"  a.real -= b.real;\n"
	"  a.imag -= b.imag;\n"
	"  return a;\n"
	"}\n"
	"\n"
	"inline float cmod(complex a);\n"
	"\n"
	"inline float cmod(complex a) {\n"
	"  return (sqrt(\n"
	"    a.real * a.real + a.imag * a.imag\n"
	"  ));\n"
	"}\n"
	"\n"
	"inline void DaCAdd(const int i_itr,\n"
	"                   const unsigned int Half,\n"
	"                   complex windowAdded[]);\n"
	"\n"
	"inline void DaCAdd(const int i_itr,\n"
	"                   const unsigned int Half,\n"
	"                   complex windowAdded[]) {\n"
	"  unsigned int inRange = i_itr < Half;\n"
	"  float Dpoint = windowAdded[i_itr].imag;\n"
	"  float Apoint = windowAdded[i_itr + (Half * inRange)].imag;\n"
	"  windowAdded[i_itr].imag = (Dpoint + Apoint) * inRange;\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_overlap_N_window_0(__global float * in,\n"
	"                               __global complex * buffer,\n"
	"                               const unsigned int fullSize,\n"
	"                               const unsigned int OFullSize,\n"
	"                               const int windowSize,\n"
	"                               const unsigned int OMove);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_overlap_N_window_0(__global float * in,\n"
	"                               __global complex * buffer,\n"
	"                               const unsigned int fullSize,\n"
	"                               const unsigned int OFullSize,\n"
	"                               const int windowSize,\n"
	"                               const unsigned int OMove) {\n"
	"  {\n"
	"    unsigned int w_num = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int w_itr = 0 + get_local_id(0);\n"
	"      unsigned int FID = w_num + w_itr;\n"
	"      unsigned int read_point = (unsigned int) ((FID) / windowSize) * OMove + ((FID) % windowSize);\n"
	"\n"
	"      buffer[FID].real = read_point >= fullSize ? 0.0 : in[read_point];\n"
	"      // * window_func((FID) % windowSize, windowSize);\n"
	"      buffer[FID].imag = 0.0;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_bitReverse_temp_0(__global complex * buffer,\n"
	"                              __global complex * result,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const int windowSize,\n"
	"                              const int radixData);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_bitReverse_temp_0(__global complex * buffer,\n"
	"                              __global complex * result,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const int windowSize,\n"
	"                              const int radixData) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int w_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = (o_itr + w_itr);\n"
	"      unsigned int Lidx = (Gidx % windowSize);\n"
	"      unsigned int dst_idx = reverseBits(Lidx, radixData);\n"
	"      unsigned int BID = Gidx - Lidx + dst_idx;\n"
	"      result[BID] = buffer[Gidx];\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Butterfly_0(__global complex * buffer,\n"
	"                        const int windowSize,\n"
	"                        const int powed_stage,\n"
	"                        const unsigned int OHalfSize,\n"
	"                        const int radixData);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Butterfly_0(__global complex * buffer,\n"
	"                        const int windowSize,\n"
	"                        const int powed_stage,\n"
	"                        const unsigned int OHalfSize,\n"
	"                        const int radixData) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int GID = o_itr + i_itr;\n"
	"      pairs butterfly_target = indexer(GID, powed_stage);\n"
	"      int k = (GID % powed_stage) * (windowSize / (2 * powed_stage));\n"
	"      //(GID%powed_stage) * (windowSize / powed_stage);\n"
	"      complex this_twiddle = twiddle(k, windowSize);\n"
	"      complex first = buffer[butterfly_target.first];\n"
	"      complex second = buffer[butterfly_target.second];\n"
	"      complex tempx = cadd(first, second);\n"
	"      complex tempy = csub(first, second);\n"
	"      tempy = cmult(tempy, this_twiddle);\n"
	"      buffer[butterfly_target.first] = tempx;\n"
	"      buffer[butterfly_target.second] = tempy;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_toPower_0(__global complex * buffer,\n"
	"                      __global float * out,\n"
	"                      const unsigned int OHalfSize,\n"
	"                      const int windowRadix);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_toPower_0(__global complex * buffer,\n"
	"                      __global float * out,\n"
	"                      const unsigned int OHalfSize,\n"
	"                      const int windowRadix) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      const unsigned int GID = o_itr + i_itr;\n"
	"      unsigned int BID = (GID >> (windowRadix - 1)) * (1 << windowRadix) + (GID & ((1 << (windowRadix - 1)) - 1));\n"
	"      float powered = cmod(buffer[BID]);\n"
	"      //powered = log10(powered);\n"
	"      out[GID] = powered;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_15_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_15_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut) {\n"
	"  __local float windowAdded[16384];\n"
	"  __local complex windowBuffer[32768];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + get_group_id(0);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized15_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized15_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize) {\n"
	"  __local complex SBank[32768];\n"
	"  __local complex FBank[32768];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (16384 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW15_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW15_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut) {\n"
	"  __local float windowAdded[16384];\n"
	"  __local complex SBank[32768];\n"
	"  __local complex FBank[32768];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (16384 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	;
std::string radix11 = 
	"#pragma OPENCL EXTENSION cl_khr_fp64 : enable\n"
	"\n"
	"#include <math.h>\n"
	"#include <cstdio>\n"
	"\n"
	"typedef struct complex_t {\n"
	"  float real, imag;\n"
	"} complex;\n"
	"\n"
	"typedef struct pairs_t {\n"
	"  unsigned int first, second;\n"
	"} pairs;\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size);\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size) {\n"
	"  float normalized_index = (float) index;\n"
	"  normalized_index /= ((float) (window_size - 1));\n"
	"  float angle = 2.0f * M_PI * normalized_index;\n"
	"  return 0.5f * (1.0f - cos(angle));\n"
	"}\n"
	"\n"
	"inline int reverseBits(int num,\n"
	"                       int radix_2_data);\n"
	"\n"
	"inline int reverseBits(int num,\n"
	"                       int radix_2_data) {\n"
	"  int reversed = 0;\n"
	"  for (int i = 0; i < radix_2_data; ++i) {\n"
	"    reversed = (reversed << 1) | (num & 1);\n"
	"    num >>= 1;\n"
	"  }\n"
	"  return reversed;\n"
	"}\n"
	"\n"
	"pairs indexer(const unsigned int firstMaximumID,\n"
	"              const int powed_stage);\n"
	"\n"
	"pairs indexer(const unsigned int firstMaximumID,\n"
	"              const int powed_stage) {\n"
	"  pairs temp;\n"
	"  temp.first = firstMaximumID + (firstMaximumID & (~(powed_stage - 1)));\n"
	"  temp.second = temp.first + powed_stage;\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"inline int segmentK(const int lsave,\n"
	"                    const int segmentSize,\n"
	"                    const int HwindowSize);\n"
	"\n"
	"inline int segmentK(const int lsave,\n"
	"                    const int segmentSize,\n"
	"                    const int HwindowSize) {\n"
	"  return ((lsave % segmentSize) * HwindowSize) / segmentSize;\n"
	"}\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize);\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize) {\n"
	"  complex temp;\n"
	"  float angle = -2.0 * M_PI * ((float) k / (float) windowSize);\n"
	"  temp.real = cos(angle);\n"
	"  temp.imag = sin(angle);\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"inline complex cmult(const complex a,\n"
	"                     const complex b);\n"
	"\n"
	"inline complex cmult(const complex a,\n"
	"                     const complex b) {\n"
	"  complex result;\n"
	"  result.real = a.real * b.real - a.imag * b.imag;\n"
	"  result.imag = a.real * b.imag + a.imag * b.real;\n"
	"  return result;\n"
	"}\n"
	"\n"
	"inline float RMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib);\n"
	"\n"
	"inline float RMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib) {\n"
	"  return (Ra * Rb) - (Ia * Ib);\n"
	"}\n"
	"\n"
	"inline float IMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib);\n"
	"\n"
	"inline float IMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib) {\n"
	"  return (Ra * Rb) + (Ia * Ib);\n"
	"}\n"
	"\n"
	"inline complex cadd(complex a,\n"
	"                    const complex b);\n"
	"\n"
	"inline complex cadd(complex a,\n"
	"                    const complex b) {\n"
	"  a.real += b.real;\n"
	"  a.imag += b.imag;\n"
	"  return a;\n"
	"}\n"
	"\n"
	"inline complex csub(complex a,\n"
	"                    const complex b);\n"
	"\n"
	"inline complex csub(complex a,\n"
	"                    const complex b) {\n"
	"  a.real -= b.real;\n"
	"  a.imag -= b.imag;\n"
	"  return a;\n"
	"}\n"
	"\n"
	"inline float cmod(complex a);\n"
	"\n"
	"inline float cmod(complex a) {\n"
	"  return (sqrt(\n"
	"    a.real * a.real + a.imag * a.imag\n"
	"  ));\n"
	"}\n"
	"\n"
	"inline void DaCAdd(const int i_itr,\n"
	"                   const unsigned int Half,\n"
	"                   complex windowAdded[]);\n"
	"\n"
	"inline void DaCAdd(const int i_itr,\n"
	"                   const unsigned int Half,\n"
	"                   complex windowAdded[]) {\n"
	"  unsigned int inRange = i_itr < Half;\n"
	"  float Dpoint = windowAdded[i_itr].imag;\n"
	"  float Apoint = windowAdded[i_itr + (Half * inRange)].imag;\n"
	"  windowAdded[i_itr].imag = (Dpoint + Apoint) * inRange;\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_overlap_N_window_0(__global float * in,\n"
	"                               __global complex * buffer,\n"
	"                               const unsigned int fullSize,\n"
	"                               const unsigned int OFullSize,\n"
	"                               const int windowSize,\n"
	"                               const unsigned int OMove);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_overlap_N_window_0(__global float * in,\n"
	"                               __global complex * buffer,\n"
	"                               const unsigned int fullSize,\n"
	"                               const unsigned int OFullSize,\n"
	"                               const int windowSize,\n"
	"                               const unsigned int OMove) {\n"
	"  {\n"
	"    unsigned int w_num = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int w_itr = 0 + get_local_id(0);\n"
	"      unsigned int FID = w_num + w_itr;\n"
	"      unsigned int read_point = (unsigned int) ((FID) / windowSize) * OMove + ((FID) % windowSize);\n"
	"\n"
	"      buffer[FID].real = read_point >= fullSize ? 0.0 : in[read_point];\n"
	"      // * window_func((FID) % windowSize, windowSize);\n"
	"      buffer[FID].imag = 0.0;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_bitReverse_temp_0(__global complex * buffer,\n"
	"                              __global complex * result,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const int windowSize,\n"
	"                              const int radixData);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_bitReverse_temp_0(__global complex * buffer,\n"
	"                              __global complex * result,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const int windowSize,\n"
	"                              const int radixData) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int w_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = (o_itr + w_itr);\n"
	"      unsigned int Lidx = (Gidx % windowSize);\n"
	"      unsigned int dst_idx = reverseBits(Lidx, radixData);\n"
	"      unsigned int BID = Gidx - Lidx + dst_idx;\n"
	"      result[BID] = buffer[Gidx];\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Butterfly_0(__global complex * buffer,\n"
	"                        const int windowSize,\n"
	"                        const int powed_stage,\n"
	"                        const unsigned int OHalfSize,\n"
	"                        const int radixData);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Butterfly_0(__global complex * buffer,\n"
	"                        const int windowSize,\n"
	"                        const int powed_stage,\n"
	"                        const unsigned int OHalfSize,\n"
	"                        const int radixData) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int GID = o_itr + i_itr;\n"
	"      pairs butterfly_target = indexer(GID, powed_stage);\n"
	"      int k = (GID % powed_stage) * (windowSize / (2 * powed_stage));\n"
	"      //(GID%powed_stage) * (windowSize / powed_stage);\n"
	"      complex this_twiddle = twiddle(k, windowSize);\n"
	"      complex first = buffer[butterfly_target.first];\n"
	"      complex second = buffer[butterfly_target.second];\n"
	"      complex tempx = cadd(first, second);\n"
	"      complex tempy = csub(first, second);\n"
	"      tempy = cmult(tempy, this_twiddle);\n"
	"      buffer[butterfly_target.first] = tempx;\n"
	"      buffer[butterfly_target.second] = tempy;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_toPower_0(__global complex * buffer,\n"
	"                      __global float * out,\n"
	"                      const unsigned int OHalfSize,\n"
	"                      const int windowRadix);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_toPower_0(__global complex * buffer,\n"
	"                      __global float * out,\n"
	"                      const unsigned int OHalfSize,\n"
	"                      const int windowRadix) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      const unsigned int GID = o_itr + i_itr;\n"
	"      unsigned int BID = (GID >> (windowRadix - 1)) * (1 << windowRadix) + (GID & ((1 << (windowRadix - 1)) - 1));\n"
	"      float powered = cmod(buffer[BID]);\n"
	"      //powered = log10(powered);\n"
	"      out[GID] = powered;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_11_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_11_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut) {\n"
	"  __local float windowAdded[1024];\n"
	"  __local complex windowBuffer[2048];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + get_group_id(0);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 1024;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 1024].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 1024].imag = 0;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (1024)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 2048.0);\n"
	"      windowBuffer[i_itr + 1024].real -= (windowAdded[0] / 2048.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 2048);\n"
	"      windowBuffer[i_itr + 1024].real *= window_func(i_itr + 1024, 2048);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      bufferOut[o_itr * 2048 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 2048 + i_itr + 1024] = windowBuffer[i_itr + 1024];\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized11_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized11_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize) {\n"
	"  __local complex SBank[2048];\n"
	"  __local complex FBank[2048];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (1024 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 1024), 2048);\n"
	"      complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"      complex RIGHT = buffer[o_itr * 2 + i_itr + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 1024] = storeR;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW11_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW11_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut) {\n"
	"  __local float windowAdded[1024];\n"
	"  __local complex SBank[2048];\n"
	"  __local complex FBank[2048];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (1024 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int q_itr = o_itr >> 10;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 1024;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 1024].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 1024].imag = 0;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (1024)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 2048.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 2048);\n"
	"      FBank[i_itr + 1024].real -= (windowAdded[0] / 2048.0);\n"
	"      FBank[i_itr + 1024].real *= window_func(i_itr + 1024, 2048);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 1024), 2048);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 1024] = storeR;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	;
std::string compiled = 
	"#pragma OPENCL EXTENSION cl_khr_fp64 : enable\n"
	"\n"
	"#include <math.h>\n"
	"#include <cstdio>\n"
	"\n"
	"typedef struct complex_t {\n"
	"  float real, imag;\n"
	"} complex;\n"
	"\n"
	"typedef struct pairs_t {\n"
	"  unsigned int first, second;\n"
	"} pairs;\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size);\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size) {\n"
	"  float normalized_index = (float) index;\n"
	"  normalized_index /= ((float) (window_size - 1));\n"
	"  float angle = 2.0f * M_PI * normalized_index;\n"
	"  return 0.5f * (1.0f - cos(angle));\n"
	"}\n"
	"\n"
	"inline int reverseBits(int num,\n"
	"                       int radix_2_data);\n"
	"\n"
	"inline int reverseBits(int num,\n"
	"                       int radix_2_data) {\n"
	"  int reversed = 0;\n"
	"  for (int i = 0; i < radix_2_data; ++i) {\n"
	"    reversed = (reversed << 1) | (num & 1);\n"
	"    num >>= 1;\n"
	"  }\n"
	"  return reversed;\n"
	"}\n"
	"\n"
	"pairs indexer(const unsigned int firstMaximumID,\n"
	"              const int powed_stage);\n"
	"\n"
	"pairs indexer(const unsigned int firstMaximumID,\n"
	"              const int powed_stage) {\n"
	"  pairs temp;\n"
	"  temp.first = firstMaximumID + (firstMaximumID & (~(powed_stage - 1)));\n"
	"  temp.second = temp.first + powed_stage;\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"inline int segmentK(const int lsave,\n"
	"                    const int segmentSize,\n"
	"                    const int HwindowSize);\n"
	"\n"
	"inline int segmentK(const int lsave,\n"
	"                    const int segmentSize,\n"
	"                    const int HwindowSize) {\n"
	"  return ((lsave % segmentSize) * HwindowSize) / segmentSize;\n"
	"}\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize);\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize) {\n"
	"  complex temp;\n"
	"  float angle = -2.0 * M_PI * ((float) k / (float) windowSize);\n"
	"  temp.real = cos(angle);\n"
	"  temp.imag = sin(angle);\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"inline complex cmult(const complex a,\n"
	"                     const complex b);\n"
	"\n"
	"inline complex cmult(const complex a,\n"
	"                     const complex b) {\n"
	"  complex result;\n"
	"  result.real = a.real * b.real - a.imag * b.imag;\n"
	"  result.imag = a.real * b.imag + a.imag * b.real;\n"
	"  return result;\n"
	"}\n"
	"\n"
	"inline complex cadd(complex a,\n"
	"                    const complex b);\n"
	"\n"
	"inline complex cadd(complex a,\n"
	"                    const complex b) {\n"
	"  a.real += b.real;\n"
	"  a.imag += b.imag;\n"
	"  return a;\n"
	"}\n"
	"\n"
	"inline complex csub(complex a,\n"
	"                    const complex b);\n"
	"\n"
	"inline complex csub(complex a,\n"
	"                    const complex b) {\n"
	"  a.real -= b.real;\n"
	"  a.imag -= b.imag;\n"
	"  return a;\n"
	"}\n"
	"\n"
	"inline float cmod(complex a);\n"
	"\n"
	"inline float cmod(complex a) {\n"
	"  return (sqrt(\n"
	"    a.real * a.real + a.imag * a.imag\n"
	"  ));\n"
	"}\n"
	"\n"
	"inline void DaCAdd(const int i_itr,\n"
	"                   const unsigned int Half,\n"
	"                   float windowAdded[]);\n"
	"\n"
	"inline void DaCAdd(const int i_itr,\n"
	"                   const unsigned int Half,\n"
	"                   float windowAdded[]) {\n"
	"  unsigned int inRange = i_itr < Half;\n"
	"  float Dpoint = windowAdded[i_itr];\n"
	"  float Apoint = windowAdded[i_itr + (Half * inRange)];\n"
	"  windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_overlap_N_window_0(__global float * in,\n"
	"                               __global complex * buffer,\n"
	"                               const unsigned int fullSize,\n"
	"                               const unsigned int OFullSize,\n"
	"                               const int windowSize,\n"
	"                               const unsigned int OMove);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_overlap_N_window_0(__global float * in,\n"
	"                               __global complex * buffer,\n"
	"                               const unsigned int fullSize,\n"
	"                               const unsigned int OFullSize,\n"
	"                               const int windowSize,\n"
	"                               const unsigned int OMove) {\n"
	"  {\n"
	"    unsigned int w_num = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int w_itr = 0 + get_local_id(0);\n"
	"      unsigned int FID = w_num + w_itr;\n"
	"      unsigned int read_point = (unsigned int) ((FID) / windowSize) * OMove + ((FID) % windowSize);\n"
	"\n"
	"      buffer[FID].real = read_point >= fullSize ? 0.0 : in[read_point];\n"
	"      // * window_func((FID) % windowSize, windowSize);\n"
	"      buffer[FID].imag = 0.0;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_bitReverse_temp_0(__global complex * buffer,\n"
	"                              __global complex * result,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const int windowSize,\n"
	"                              const int radixData);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_bitReverse_temp_0(__global complex * buffer,\n"
	"                              __global complex * result,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const int windowSize,\n"
	"                              const int radixData) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int w_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = (o_itr + w_itr);\n"
	"      unsigned int Lidx = (Gidx % windowSize);\n"
	"      unsigned int dst_idx = reverseBits(Lidx, radixData);\n"
	"      unsigned int BID = Gidx - Lidx + dst_idx;\n"
	"      result[BID] = buffer[Gidx];\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Butterfly_0(__global complex * buffer,\n"
	"                        const int windowSize,\n"
	"                        const int powed_stage,\n"
	"                        const unsigned int OHalfSize,\n"
	"                        const int radixData);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Butterfly_0(__global complex * buffer,\n"
	"                        const int windowSize,\n"
	"                        const int powed_stage,\n"
	"                        const unsigned int OHalfSize,\n"
	"                        const int radixData) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int GID = o_itr + i_itr;\n"
	"      pairs butterfly_target = indexer(GID, powed_stage);\n"
	"      int k = (GID % powed_stage) * (windowSize / (2 * powed_stage));\n"
	"      //(GID%powed_stage) * (windowSize / powed_stage);\n"
	"      complex this_twiddle = twiddle(k, windowSize);\n"
	"      complex first = buffer[butterfly_target.first];\n"
	"      complex second = buffer[butterfly_target.second];\n"
	"      complex tempx = cadd(first, second);\n"
	"      complex tempy = csub(first, second);\n"
	"      tempy = cmult(tempy, this_twiddle);\n"
	"      buffer[butterfly_target.first] = tempx;\n"
	"      buffer[butterfly_target.second] = tempy;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_toPower_0(__global complex * buffer,\n"
	"                      __global float * out,\n"
	"                      const unsigned int OHalfSize,\n"
	"                      const int windowRadix);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_toPower_0(__global complex * buffer,\n"
	"                      __global float * out,\n"
	"                      const unsigned int OHalfSize,\n"
	"                      const int windowRadix) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      const unsigned int GID = o_itr + i_itr;\n"
	"      unsigned int BID = (GID >> (windowRadix - 1)) * (1 << windowRadix) + (GID & ((1 << (windowRadix - 1)) - 1));\n"
	"      float powered = cmod(buffer[BID]);\n"
	"      //powered = log10(powered);\n"
	"      out[GID] = powered;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_preprocessed_ODW10_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_preprocessed_ODW10_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut) {\n"
	"  __local float windowAdded[512];\n"
	"  __local complex SBank[1024];\n"
	"  __local complex FBank[1024];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (512 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int q_itr = o_itr >> 9;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 512;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 512].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 512].imag = 0;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (512)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 1024.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 1024);\n"
	"      FBank[i_itr + 512].real -= (windowAdded[0] / 1024.0);\n"
	"      FBank[i_itr + 512].real *= window_func(i_itr + 512, 1024);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 512), 1024);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 512] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 512] = storeR;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_preprocesses_ODW_10_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_preprocesses_ODW_10_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut) {\n"
	"  __local float windowAdded[512];\n"
	"  __local complex windowBuffer[1024];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + get_group_id(0);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 512;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 512].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 512].imag = 0;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 512;\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (512 * inRange)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 1024.0);\n"
	"      windowBuffer[i_itr + 512].real -= (windowAdded[0] / 1024.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 1024);\n"
	"      windowBuffer[i_itr + 512].real *= window_func(i_itr + 512, 1024);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      bufferOut[o_itr * 1024 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 1024 + i_itr + 512] = windowBuffer[i_itr + 512];\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_Stockhpotimized10_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_Stockhpotimized10_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize) {\n"
	"  __local complex SBank[1024];\n"
	"  __local complex FBank[1024];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (512 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 512), 1024);\n"
	"      complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"      complex RIGHT = buffer[o_itr * 2 + i_itr + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 512] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 512] = storeR;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_11_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_11_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut) {\n"
	"  __local float windowAdded[1024];\n"
	"  __local complex windowBuffer[2048];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + get_group_id(0);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 1024;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 1024].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 1024].imag = 0;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (1024)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 2048.0);\n"
	"      windowBuffer[i_itr + 1024].real -= (windowAdded[0] / 2048.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 2048);\n"
	"      windowBuffer[i_itr + 1024].real *= window_func(i_itr + 1024, 2048);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      bufferOut[o_itr * 2048 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 2048 + i_itr + 1024] = windowBuffer[i_itr + 1024];\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized11_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized11_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize) {\n"
	"  __local complex SBank[2048];\n"
	"  __local complex FBank[2048];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (1024 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 1024), 2048);\n"
	"      complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"      complex RIGHT = buffer[o_itr * 2 + i_itr + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 1024] = storeR;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW11_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW11_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut) {\n"
	"  __local float windowAdded[1024];\n"
	"  __local complex SBank[2048];\n"
	"  __local complex FBank[2048];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (1024 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int q_itr = o_itr >> 10;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 1024;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 1024].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 1024].imag = 0;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (1024)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 2048.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 2048);\n"
	"      FBank[i_itr + 1024].real -= (windowAdded[0] / 2048.0);\n"
	"      FBank[i_itr + 1024].real *= window_func(i_itr + 1024, 2048);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 1024), 2048);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 1024] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 1024), 2048);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 1024] = storeR;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_12_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_12_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut) {\n"
	"  __local float windowAdded[2048];\n"
	"  __local complex windowBuffer[4096];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + get_group_id(0);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 2048;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 2048].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 2048].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 2048;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 2048].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 2048].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (2048)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (2048)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 4096.0);\n"
	"      windowBuffer[i_itr + 2048].real -= (windowAdded[0] / 4096.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 4096);\n"
	"      windowBuffer[i_itr + 2048].real *= window_func(i_itr + 2048, 4096);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 4096.0);\n"
	"      windowBuffer[i_itr + 2048].real -= (windowAdded[0] / 4096.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 4096);\n"
	"      windowBuffer[i_itr + 2048].real *= window_func(i_itr + 2048, 4096);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      bufferOut[o_itr * 4096 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 4096 + i_itr + 2048] = windowBuffer[i_itr + 2048];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      bufferOut[o_itr * 4096 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 4096 + i_itr + 2048] = windowBuffer[i_itr + 2048];\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized12_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized12_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize) {\n"
	"  __local complex SBank[4096];\n"
	"  __local complex FBank[4096];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (2048 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 2048), 4096);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 2048];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 2048] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 2048), 4096);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 2048];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 2048] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW12_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW12_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut) {\n"
	"  __local float windowAdded[2048];\n"
	"  __local complex SBank[4096];\n"
	"  __local complex FBank[4096];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (2048 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 11;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 2048;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 2048].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 2048].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 11;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 2048;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 2048].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 2048].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (2048)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (2048)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 4096.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 4096);\n"
	"      FBank[i_itr + 2048].real -= (windowAdded[0] / 4096.0);\n"
	"      FBank[i_itr + 2048].real *= window_func(i_itr + 2048, 4096);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 4096.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 4096);\n"
	"      FBank[i_itr + 2048].real -= (windowAdded[0] / 4096.0);\n"
	"      FBank[i_itr + 2048].real *= window_func(i_itr + 2048, 4096);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 2048), 4096);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 2048), 4096);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 2048), 4096);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 2048] = storeR;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_13_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_13_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut) {\n"
	"  __local float windowAdded[4096];\n"
	"  __local complex windowBuffer[8192];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + get_group_id(0);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 4096;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 4096].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 4096].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 4096;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 4096].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 4096].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 4096;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 4096].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 4096].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 4096;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 4096].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 4096].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (4096)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (4096)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (4096)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (4096)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 8192.0);\n"
	"      windowBuffer[i_itr + 4096].real -= (windowAdded[0] / 8192.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 8192);\n"
	"      windowBuffer[i_itr + 4096].real *= window_func(i_itr + 4096, 8192);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 8192.0);\n"
	"      windowBuffer[i_itr + 4096].real -= (windowAdded[0] / 8192.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 8192);\n"
	"      windowBuffer[i_itr + 4096].real *= window_func(i_itr + 4096, 8192);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 8192.0);\n"
	"      windowBuffer[i_itr + 4096].real -= (windowAdded[0] / 8192.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 8192);\n"
	"      windowBuffer[i_itr + 4096].real *= window_func(i_itr + 4096, 8192);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 8192.0);\n"
	"      windowBuffer[i_itr + 4096].real -= (windowAdded[0] / 8192.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 8192);\n"
	"      windowBuffer[i_itr + 4096].real *= window_func(i_itr + 4096, 8192);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      bufferOut[o_itr * 8192 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 8192 + i_itr + 4096] = windowBuffer[i_itr + 4096];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      bufferOut[o_itr * 8192 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 8192 + i_itr + 4096] = windowBuffer[i_itr + 4096];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      bufferOut[o_itr * 8192 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 8192 + i_itr + 4096] = windowBuffer[i_itr + 4096];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      bufferOut[o_itr * 8192 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 8192 + i_itr + 4096] = windowBuffer[i_itr + 4096];\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized13_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized13_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize) {\n"
	"  __local complex SBank[8192];\n"
	"  __local complex FBank[8192];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (4096 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 4096), 8192);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 4096];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 4096] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 4096), 8192);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 4096];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 4096] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 4096), 8192);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 4096];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 4096] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 4096), 8192);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 4096];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 4096] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW13_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW13_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut) {\n"
	"  __local float windowAdded[4096];\n"
	"  __local complex SBank[8192];\n"
	"  __local complex FBank[8192];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (4096 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 12;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 4096;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 4096].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 4096].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 12;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 4096;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 4096].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 4096].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 12;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 4096;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 4096].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 4096].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 12;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 4096;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 4096].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 4096].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (4096)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (4096)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (4096)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (4096)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 8192.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 8192);\n"
	"      FBank[i_itr + 4096].real -= (windowAdded[0] / 8192.0);\n"
	"      FBank[i_itr + 4096].real *= window_func(i_itr + 4096, 8192);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 8192.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 8192);\n"
	"      FBank[i_itr + 4096].real -= (windowAdded[0] / 8192.0);\n"
	"      FBank[i_itr + 4096].real *= window_func(i_itr + 4096, 8192);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 8192.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 8192);\n"
	"      FBank[i_itr + 4096].real -= (windowAdded[0] / 8192.0);\n"
	"      FBank[i_itr + 4096].real *= window_func(i_itr + 4096, 8192);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 8192.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 8192);\n"
	"      FBank[i_itr + 4096].real -= (windowAdded[0] / 8192.0);\n"
	"      FBank[i_itr + 4096].real *= window_func(i_itr + 4096, 8192);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 4096), 8192);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 4096), 8192);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 4096), 8192);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 4096), 8192);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 4096), 8192);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 4096] = storeR;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_14_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_14_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut) {\n"
	"  __local float windowAdded[8192];\n"
	"  __local complex windowBuffer[16384];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + get_group_id(0);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 16384);\n"
	"      windowBuffer[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 16384);\n"
	"      windowBuffer[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 16384);\n"
	"      windowBuffer[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 16384);\n"
	"      windowBuffer[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 16384);\n"
	"      windowBuffer[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 16384);\n"
	"      windowBuffer[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 16384);\n"
	"      windowBuffer[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 16384);\n"
	"      windowBuffer[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      bufferOut[o_itr * 16384 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 16384 + i_itr + 8192] = windowBuffer[i_itr + 8192];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      bufferOut[o_itr * 16384 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 16384 + i_itr + 8192] = windowBuffer[i_itr + 8192];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      bufferOut[o_itr * 16384 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 16384 + i_itr + 8192] = windowBuffer[i_itr + 8192];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      bufferOut[o_itr * 16384 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 16384 + i_itr + 8192] = windowBuffer[i_itr + 8192];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      bufferOut[o_itr * 16384 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 16384 + i_itr + 8192] = windowBuffer[i_itr + 8192];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      bufferOut[o_itr * 16384 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 16384 + i_itr + 8192] = windowBuffer[i_itr + 8192];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      bufferOut[o_itr * 16384 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 16384 + i_itr + 8192] = windowBuffer[i_itr + 8192];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      bufferOut[o_itr * 16384 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 16384 + i_itr + 8192] = windowBuffer[i_itr + 8192];\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized14_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized14_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize) {\n"
	"  __local complex SBank[16384];\n"
	"  __local complex FBank[16384];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (8192 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 8192];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 8192] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 8192];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 8192] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 8192];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 8192] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 8192];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 8192] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 8192];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 8192] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 8192];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 8192] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 8192];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 8192] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 8192];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 8192] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW14_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW14_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut) {\n"
	"  __local float windowAdded[8192];\n"
	"  __local complex SBank[16384];\n"
	"  __local complex FBank[16384];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (8192 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 13;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 13;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 13;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 13;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 13;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 13;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 13;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 13;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 16384);\n"
	"      FBank[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 16384);\n"
	"      FBank[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 16384);\n"
	"      FBank[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 16384);\n"
	"      FBank[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 16384);\n"
	"      FBank[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 16384);\n"
	"      FBank[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 16384);\n"
	"      FBank[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 16384);\n"
	"      FBank[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_15_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_15_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut) {\n"
	"  __local float windowAdded[16384];\n"
	"  __local complex windowBuffer[32768];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + get_group_id(0);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 32768);\n"
	"      windowBuffer[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      bufferOut[o_itr * 32768 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 32768 + i_itr + 16384] = windowBuffer[i_itr + 16384];\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized15_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized15_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize) {\n"
	"  __local complex SBank[32768];\n"
	"  __local complex FBank[32768];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (16384 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 16384];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        SBank[i_itr] = storeL;\n"
	"        SBank[i_itr + 16384] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW15_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW15_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut) {\n"
	"  __local float windowAdded[16384];\n"
	"  __local complex SBank[32768];\n"
	"  __local complex FBank[32768];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (16384 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 14;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 16384;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 16384].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 16384].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (16384)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8192, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 32768);\n"
	"      FBank[i_itr + 16384].real -= (windowAdded[0] / 32768.0);\n"
	"      FBank[i_itr + 16384].real *= window_func(i_itr + 16384, 32768);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16384, 16384), 32768);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 16384];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 8191) | ((i_itr >> 13) << 14);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 8192 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 9216 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 10240 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 11264 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 12288 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 13312 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 14336 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 15360 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 16384), 32768);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 16384] = storeR;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	;
std::string radix14 = 
	"#pragma OPENCL EXTENSION cl_khr_fp64 : enable\n"
	"\n"
	"#include <math.h>\n"
	"#include <cstdio>\n"
	"\n"
	"typedef struct complex_t {\n"
	"  float real, imag;\n"
	"} complex;\n"
	"\n"
	"typedef struct pairs_t {\n"
	"  unsigned int first, second;\n"
	"} pairs;\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size);\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size) {\n"
	"  float normalized_index = (float) index;\n"
	"  normalized_index /= ((float) (window_size - 1));\n"
	"  float angle = 2.0f * M_PI * normalized_index;\n"
	"  return 0.5f * (1.0f - cos(angle));\n"
	"}\n"
	"\n"
	"inline int reverseBits(int num,\n"
	"                       int radix_2_data);\n"
	"\n"
	"inline int reverseBits(int num,\n"
	"                       int radix_2_data) {\n"
	"  int reversed = 0;\n"
	"  for (int i = 0; i < radix_2_data; ++i) {\n"
	"    reversed = (reversed << 1) | (num & 1);\n"
	"    num >>= 1;\n"
	"  }\n"
	"  return reversed;\n"
	"}\n"
	"\n"
	"pairs indexer(const unsigned int firstMaximumID,\n"
	"              const int powed_stage);\n"
	"\n"
	"pairs indexer(const unsigned int firstMaximumID,\n"
	"              const int powed_stage) {\n"
	"  pairs temp;\n"
	"  temp.first = firstMaximumID + (firstMaximumID & (~(powed_stage - 1)));\n"
	"  temp.second = temp.first + powed_stage;\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"inline int segmentK(const int lsave,\n"
	"                    const int segmentSize,\n"
	"                    const int HwindowSize);\n"
	"\n"
	"inline int segmentK(const int lsave,\n"
	"                    const int segmentSize,\n"
	"                    const int HwindowSize) {\n"
	"  return ((lsave % segmentSize) * HwindowSize) / segmentSize;\n"
	"}\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize);\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize) {\n"
	"  complex temp;\n"
	"  float angle = -2.0 * M_PI * ((float) k / (float) windowSize);\n"
	"  temp.real = cos(angle);\n"
	"  temp.imag = sin(angle);\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"inline complex cmult(const complex a,\n"
	"                     const complex b);\n"
	"\n"
	"inline complex cmult(const complex a,\n"
	"                     const complex b) {\n"
	"  complex result;\n"
	"  result.real = a.real * b.real - a.imag * b.imag;\n"
	"  result.imag = a.real * b.imag + a.imag * b.real;\n"
	"  return result;\n"
	"}\n"
	"\n"
	"inline float RMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib);\n"
	"\n"
	"inline float RMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib) {\n"
	"  return (Ra * Rb) - (Ia * Ib);\n"
	"}\n"
	"\n"
	"inline float IMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib);\n"
	"\n"
	"inline float IMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib) {\n"
	"  return (Ra * Rb) + (Ia * Ib);\n"
	"}\n"
	"\n"
	"inline complex cadd(complex a,\n"
	"                    const complex b);\n"
	"\n"
	"inline complex cadd(complex a,\n"
	"                    const complex b) {\n"
	"  a.real += b.real;\n"
	"  a.imag += b.imag;\n"
	"  return a;\n"
	"}\n"
	"\n"
	"inline complex csub(complex a,\n"
	"                    const complex b);\n"
	"\n"
	"inline complex csub(complex a,\n"
	"                    const complex b) {\n"
	"  a.real -= b.real;\n"
	"  a.imag -= b.imag;\n"
	"  return a;\n"
	"}\n"
	"\n"
	"inline float cmod(complex a);\n"
	"\n"
	"inline float cmod(complex a) {\n"
	"  return (sqrt(\n"
	"    a.real * a.real + a.imag * a.imag\n"
	"  ));\n"
	"}\n"
	"\n"
	"inline void DaCAdd(const int i_itr,\n"
	"                   const unsigned int Half,\n"
	"                   complex windowAdded[]);\n"
	"\n"
	"inline void DaCAdd(const int i_itr,\n"
	"                   const unsigned int Half,\n"
	"                   complex windowAdded[]) {\n"
	"  unsigned int inRange = i_itr < Half;\n"
	"  float Dpoint = windowAdded[i_itr].imag;\n"
	"  float Apoint = windowAdded[i_itr + (Half * inRange)].imag;\n"
	"  windowAdded[i_itr].imag = (Dpoint + Apoint) * inRange;\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_overlap_N_window_0(__global float * in,\n"
	"                               __global complex * buffer,\n"
	"                               const unsigned int fullSize,\n"
	"                               const unsigned int OFullSize,\n"
	"                               const int windowSize,\n"
	"                               const unsigned int OMove);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_overlap_N_window_0(__global float * in,\n"
	"                               __global complex * buffer,\n"
	"                               const unsigned int fullSize,\n"
	"                               const unsigned int OFullSize,\n"
	"                               const int windowSize,\n"
	"                               const unsigned int OMove) {\n"
	"  {\n"
	"    unsigned int w_num = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int w_itr = 0 + get_local_id(0);\n"
	"      unsigned int FID = w_num + w_itr;\n"
	"      unsigned int read_point = (unsigned int) ((FID) / windowSize) * OMove + ((FID) % windowSize);\n"
	"\n"
	"      buffer[FID].real = read_point >= fullSize ? 0.0 : in[read_point];\n"
	"      // * window_func((FID) % windowSize, windowSize);\n"
	"      buffer[FID].imag = 0.0;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_bitReverse_temp_0(__global complex * buffer,\n"
	"                              __global complex * result,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const int windowSize,\n"
	"                              const int radixData);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_bitReverse_temp_0(__global complex * buffer,\n"
	"                              __global complex * result,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const int windowSize,\n"
	"                              const int radixData) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int w_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = (o_itr + w_itr);\n"
	"      unsigned int Lidx = (Gidx % windowSize);\n"
	"      unsigned int dst_idx = reverseBits(Lidx, radixData);\n"
	"      unsigned int BID = Gidx - Lidx + dst_idx;\n"
	"      result[BID] = buffer[Gidx];\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Butterfly_0(__global complex * buffer,\n"
	"                        const int windowSize,\n"
	"                        const int powed_stage,\n"
	"                        const unsigned int OHalfSize,\n"
	"                        const int radixData);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Butterfly_0(__global complex * buffer,\n"
	"                        const int windowSize,\n"
	"                        const int powed_stage,\n"
	"                        const unsigned int OHalfSize,\n"
	"                        const int radixData) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int GID = o_itr + i_itr;\n"
	"      pairs butterfly_target = indexer(GID, powed_stage);\n"
	"      int k = (GID % powed_stage) * (windowSize / (2 * powed_stage));\n"
	"      //(GID%powed_stage) * (windowSize / powed_stage);\n"
	"      complex this_twiddle = twiddle(k, windowSize);\n"
	"      complex first = buffer[butterfly_target.first];\n"
	"      complex second = buffer[butterfly_target.second];\n"
	"      complex tempx = cadd(first, second);\n"
	"      complex tempy = csub(first, second);\n"
	"      tempy = cmult(tempy, this_twiddle);\n"
	"      buffer[butterfly_target.first] = tempx;\n"
	"      buffer[butterfly_target.second] = tempy;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_toPower_0(__global complex * buffer,\n"
	"                      __global float * out,\n"
	"                      const unsigned int OHalfSize,\n"
	"                      const int windowRadix);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_toPower_0(__global complex * buffer,\n"
	"                      __global float * out,\n"
	"                      const unsigned int OHalfSize,\n"
	"                      const int windowRadix) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      const unsigned int GID = o_itr + i_itr;\n"
	"      unsigned int BID = (GID >> (windowRadix - 1)) * (1 << windowRadix) + (GID & ((1 << (windowRadix - 1)) - 1));\n"
	"      float powered = cmod(buffer[BID]);\n"
	"      //powered = log10(powered);\n"
	"      out[GID] = powered;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_14_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_14_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut) {\n"
	"  __local float windowAdded[8192];\n"
	"  __local complex windowBuffer[16384];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + get_group_id(0);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 16384);\n"
	"      windowBuffer[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 16384);\n"
	"      windowBuffer[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 16384);\n"
	"      windowBuffer[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 16384);\n"
	"      windowBuffer[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 16384);\n"
	"      windowBuffer[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 16384);\n"
	"      windowBuffer[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 16384);\n"
	"      windowBuffer[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 16384);\n"
	"      windowBuffer[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      bufferOut[o_itr * 16384 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 16384 + i_itr + 8192] = windowBuffer[i_itr + 8192];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      bufferOut[o_itr * 16384 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 16384 + i_itr + 8192] = windowBuffer[i_itr + 8192];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      bufferOut[o_itr * 16384 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 16384 + i_itr + 8192] = windowBuffer[i_itr + 8192];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      bufferOut[o_itr * 16384 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 16384 + i_itr + 8192] = windowBuffer[i_itr + 8192];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      bufferOut[o_itr * 16384 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 16384 + i_itr + 8192] = windowBuffer[i_itr + 8192];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      bufferOut[o_itr * 16384 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 16384 + i_itr + 8192] = windowBuffer[i_itr + 8192];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      bufferOut[o_itr * 16384 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 16384 + i_itr + 8192] = windowBuffer[i_itr + 8192];\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      bufferOut[o_itr * 16384 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 16384 + i_itr + 8192] = windowBuffer[i_itr + 8192];\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized14_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized14_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize) {\n"
	"  __local complex SBank[16384];\n"
	"  __local complex FBank[16384];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (8192 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 8192];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 8192] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 8192];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 8192] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 8192];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 8192] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 8192];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 8192] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 8192];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 8192] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 8192];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 8192] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 8192];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 8192] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      {\n"
	"        complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"        complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"        complex RIGHT = buffer[o_itr * 2 + i_itr + 8192];\n"
	"        complex storeL = cadd(LEFT, RIGHT);\n"
	"        complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"        FBank[i_itr] = storeL;\n"
	"        FBank[i_itr + 8192] = storeR;\n"
	"      }\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW14_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW14_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut) {\n"
	"  __local float windowAdded[8192];\n"
	"  __local complex SBank[16384];\n"
	"  __local complex FBank[16384];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (8192 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 13;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 13;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 13;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 13;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 13;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 13;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 13;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      //overlap and extends\n"
	"      unsigned int q_itr = o_itr >> 13;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 8192;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 8192].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 8192].imag = 0;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      //removing DC\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (8192)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4096, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2048, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1024, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 512, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 16384);\n"
	"      FBank[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 16384);\n"
	"      FBank[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 16384);\n"
	"      FBank[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 16384);\n"
	"      FBank[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 16384);\n"
	"      FBank[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 16384);\n"
	"      FBank[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 16384);\n"
	"      FBank[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 16384);\n"
	"      FBank[i_itr + 8192].real -= (windowAdded[0] / 16384.0);\n"
	"      FBank[i_itr + 8192].real *= window_func(i_itr + 8192, 16384);\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8192, 8192), 16384);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 8192];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4096, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 4095) | ((i_itr >> 12) << 13);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4096];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 2047) | ((i_itr >> 11) << 12);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2048];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1024, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1023) | ((i_itr >> 10) << 11);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1024];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 511) | ((i_itr >> 9) << 10);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 1024 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 2048 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 3072 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 4096 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 5120 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 6144 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 7168 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 8192), 16384);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 8192] = storeR;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	;
std::string radix10 = 
	"#pragma OPENCL EXTENSION cl_khr_fp64 : enable\n"
	"\n"
	"#include <math.h>\n"
	"#include <cstdio>\n"
	"\n"
	"typedef struct complex_t {\n"
	"  float real, imag;\n"
	"} complex;\n"
	"\n"
	"typedef struct pairs_t {\n"
	"  unsigned int first, second;\n"
	"} pairs;\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size);\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size) {\n"
	"  float normalized_index = (float) index;\n"
	"  normalized_index /= ((float) (window_size - 1));\n"
	"  float angle = 2.0f * M_PI * normalized_index;\n"
	"  return 0.5f * (1.0f - cos(angle));\n"
	"}\n"
	"\n"
	"inline int reverseBits(int num,\n"
	"                       int radix_2_data);\n"
	"\n"
	"inline int reverseBits(int num,\n"
	"                       int radix_2_data) {\n"
	"  int reversed = 0;\n"
	"  for (int i = 0; i < radix_2_data; ++i) {\n"
	"    reversed = (reversed << 1) | (num & 1);\n"
	"    num >>= 1;\n"
	"  }\n"
	"  return reversed;\n"
	"}\n"
	"\n"
	"pairs indexer(const unsigned int firstMaximumID,\n"
	"              const int powed_stage);\n"
	"\n"
	"pairs indexer(const unsigned int firstMaximumID,\n"
	"              const int powed_stage) {\n"
	"  pairs temp;\n"
	"  temp.first = firstMaximumID + (firstMaximumID & (~(powed_stage - 1)));\n"
	"  temp.second = temp.first + powed_stage;\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"inline int segmentK(const int lsave,\n"
	"                    const int segmentSize,\n"
	"                    const int HwindowSize);\n"
	"\n"
	"inline int segmentK(const int lsave,\n"
	"                    const int segmentSize,\n"
	"                    const int HwindowSize) {\n"
	"  return ((lsave % segmentSize) * HwindowSize) / segmentSize;\n"
	"}\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize);\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize) {\n"
	"  complex temp;\n"
	"  float angle = -2.0 * M_PI * ((float) k / (float) windowSize);\n"
	"  temp.real = cos(angle);\n"
	"  temp.imag = sin(angle);\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"inline complex cmult(const complex a,\n"
	"                     const complex b);\n"
	"\n"
	"inline complex cmult(const complex a,\n"
	"                     const complex b) {\n"
	"  complex result;\n"
	"  result.real = a.real * b.real - a.imag * b.imag;\n"
	"  result.imag = a.real * b.imag + a.imag * b.real;\n"
	"  return result;\n"
	"}\n"
	"\n"
	"inline float RMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib);\n"
	"\n"
	"inline float RMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib) {\n"
	"  return (Ra * Rb) - (Ia * Ib);\n"
	"}\n"
	"\n"
	"inline float IMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib);\n"
	"\n"
	"inline float IMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib) {\n"
	"  return (Ra * Rb) + (Ia * Ib);\n"
	"}\n"
	"\n"
	"inline complex cadd(complex a,\n"
	"                    const complex b);\n"
	"\n"
	"inline complex cadd(complex a,\n"
	"                    const complex b) {\n"
	"  a.real += b.real;\n"
	"  a.imag += b.imag;\n"
	"  return a;\n"
	"}\n"
	"\n"
	"inline complex csub(complex a,\n"
	"                    const complex b);\n"
	"\n"
	"inline complex csub(complex a,\n"
	"                    const complex b) {\n"
	"  a.real -= b.real;\n"
	"  a.imag -= b.imag;\n"
	"  return a;\n"
	"}\n"
	"\n"
	"inline float cmod(complex a);\n"
	"\n"
	"inline float cmod(complex a) {\n"
	"  return (sqrt(\n"
	"    a.real * a.real + a.imag * a.imag\n"
	"  ));\n"
	"}\n"
	"\n"
	"inline void DaCAdd(const int i_itr,\n"
	"                   const unsigned int Half,\n"
	"                   complex windowAdded[]);\n"
	"\n"
	"inline void DaCAdd(const int i_itr,\n"
	"                   const unsigned int Half,\n"
	"                   complex windowAdded[]) {\n"
	"  unsigned int inRange = i_itr < Half;\n"
	"  float Dpoint = windowAdded[i_itr].imag;\n"
	"  float Apoint = windowAdded[i_itr + (Half * inRange)].imag;\n"
	"  windowAdded[i_itr].imag = (Dpoint + Apoint) * inRange;\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_overlap_N_window_0(__global float * in,\n"
	"                               __global complex * buffer,\n"
	"                               const unsigned int fullSize,\n"
	"                               const unsigned int OFullSize,\n"
	"                               const int windowSize,\n"
	"                               const unsigned int OMove);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_overlap_N_window_0(__global float * in,\n"
	"                               __global complex * buffer,\n"
	"                               const unsigned int fullSize,\n"
	"                               const unsigned int OFullSize,\n"
	"                               const int windowSize,\n"
	"                               const unsigned int OMove) {\n"
	"  {\n"
	"    unsigned int w_num = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int w_itr = 0 + get_local_id(0);\n"
	"      unsigned int FID = w_num + w_itr;\n"
	"      unsigned int read_point = (unsigned int) ((FID) / windowSize) * OMove + ((FID) % windowSize);\n"
	"\n"
	"      buffer[FID].real = read_point >= fullSize ? 0.0 : in[read_point];\n"
	"      // * window_func((FID) % windowSize, windowSize);\n"
	"      buffer[FID].imag = 0.0;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_bitReverse_temp_0(__global complex * buffer,\n"
	"                              __global complex * result,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const int windowSize,\n"
	"                              const int radixData);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_bitReverse_temp_0(__global complex * buffer,\n"
	"                              __global complex * result,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const int windowSize,\n"
	"                              const int radixData) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int w_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = (o_itr + w_itr);\n"
	"      unsigned int Lidx = (Gidx % windowSize);\n"
	"      unsigned int dst_idx = reverseBits(Lidx, radixData);\n"
	"      unsigned int BID = Gidx - Lidx + dst_idx;\n"
	"      result[BID] = buffer[Gidx];\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Butterfly_0(__global complex * buffer,\n"
	"                        const int windowSize,\n"
	"                        const int powed_stage,\n"
	"                        const unsigned int OHalfSize,\n"
	"                        const int radixData);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Butterfly_0(__global complex * buffer,\n"
	"                        const int windowSize,\n"
	"                        const int powed_stage,\n"
	"                        const unsigned int OHalfSize,\n"
	"                        const int radixData) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int GID = o_itr + i_itr;\n"
	"      pairs butterfly_target = indexer(GID, powed_stage);\n"
	"      int k = (GID % powed_stage) * (windowSize / (2 * powed_stage));\n"
	"      //(GID%powed_stage) * (windowSize / powed_stage);\n"
	"      complex this_twiddle = twiddle(k, windowSize);\n"
	"      complex first = buffer[butterfly_target.first];\n"
	"      complex second = buffer[butterfly_target.second];\n"
	"      complex tempx = cadd(first, second);\n"
	"      complex tempy = csub(first, second);\n"
	"      tempy = cmult(tempy, this_twiddle);\n"
	"      buffer[butterfly_target.first] = tempx;\n"
	"      buffer[butterfly_target.second] = tempy;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_toPower_0(__global complex * buffer,\n"
	"                      __global float * out,\n"
	"                      const unsigned int OHalfSize,\n"
	"                      const int windowRadix);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_toPower_0(__global complex * buffer,\n"
	"                      __global float * out,\n"
	"                      const unsigned int OHalfSize,\n"
	"                      const int windowRadix) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      const unsigned int GID = o_itr + i_itr;\n"
	"      unsigned int BID = (GID >> (windowRadix - 1)) * (1 << windowRadix) + (GID & ((1 << (windowRadix - 1)) - 1));\n"
	"      float powered = cmod(buffer[BID]);\n"
	"      //powered = log10(powered);\n"
	"      out[GID] = powered;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_preprocessed_ODW10_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_preprocessed_ODW10_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global complex * bufferOut) {\n"
	"  __local float windowAdded[512];\n"
	"  __local complex SBank[1024];\n"
	"  __local complex FBank[1024];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (512 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int q_itr = o_itr >> 9;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 512;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FBank[i_itr].real = inData[idx] * isOverflowed;\n"
	"      FBank[i_itr].imag = 0;\n"
	"      FBank[i_itr + 512].real = inData[Ridx] * RisOverflowed;\n"
	"      FBank[i_itr + 512].imag = 0;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float Dpoint = FBank[i_itr].real;\n"
	"      float Apoint = FBank[i_itr + (512)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      FBank[i_itr].real -= (windowAdded[0] / 1024.0);\n"
	"      FBank[i_itr].real *= window_func(i_itr, 1024);\n"
	"      FBank[i_itr + 512].real -= (windowAdded[0] / 1024.0);\n"
	"      FBank[i_itr + 512].real *= window_func(i_itr + 512, 1024);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 512), 1024);\n"
	"      complex LEFT = FBank[i_itr];\n"
	"      complex RIGHT = FBank[i_itr + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 512] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      bufferOut[o_itr * 2 + i_itr] = storeL;\n"
	"      bufferOut[o_itr * 2 + i_itr + 512] = storeR;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_preprocesses_ODW_10_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_preprocesses_ODW_10_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global complex * bufferOut) {\n"
	"  __local float windowAdded[512];\n"
	"  __local complex windowBuffer[1024];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + get_group_id(0);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 512;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      windowBuffer[i_itr].real = inData[idx] * isOverflowed;\n"
	"      windowBuffer[i_itr].imag = 0;\n"
	"      windowBuffer[i_itr + 512].real = inData[Ridx] * RisOverflowed;\n"
	"      windowBuffer[i_itr + 512].imag = 0;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 512;\n"
	"      float Dpoint = windowBuffer[i_itr].real;\n"
	"      float Apoint = windowBuffer[i_itr + (512 * inRange)].real;\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 256, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 128, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 64, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 32, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 16, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 8, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 4, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 2, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      DaCAdd(i_itr, 1, windowAdded);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      windowBuffer[i_itr].real -= (windowAdded[0] / 1024.0);\n"
	"      windowBuffer[i_itr + 512].real -= (windowAdded[0] / 1024.0);\n"
	"      windowBuffer[i_itr].real *= window_func(i_itr, 1024);\n"
	"      windowBuffer[i_itr + 512].real *= window_func(i_itr + 512, 1024);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      bufferOut[o_itr * 1024 + i_itr] = windowBuffer[i_itr];\n"
	"      bufferOut[o_itr * 1024 + i_itr + 512] = windowBuffer[i_itr + 512];\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_Stockhpotimized10_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_Stockhpotimized10_0(__global complex * buffer,\n"
	"                                const unsigned int OHalfSize) {\n"
	"  __local complex SBank[1024];\n"
	"  __local complex FBank[1024];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (512 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 512, 512), 1024);\n"
	"      complex LEFT = buffer[o_itr * 2 + i_itr];\n"
	"      complex RIGHT = buffer[o_itr * 2 + i_itr + 512];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 256, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 255) | ((i_itr >> 8) << 9);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 256];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 512] = storeR;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 128, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 127) | ((i_itr >> 7) << 8);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 128];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 64, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 63) | ((i_itr >> 6) << 7);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 64];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 32, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 31) | ((i_itr >> 5) << 6);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 32];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 16, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 15) | ((i_itr >> 4) << 5);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 16];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 8, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 7) | ((i_itr >> 3) << 4);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 8];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 4, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 3) | ((i_itr >> 2) << 3);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 4];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      FBank[i_itr] = storeL;\n"
	"      FBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 2, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr & 1) | ((i_itr >> 1) << 2);\n"
	"      complex LEFT = FBank[LeftIndex];\n"
	"      complex RIGHT = FBank[LeftIndex + 2];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      SBank[i_itr] = storeL;\n"
	"      SBank[i_itr + 512] = storeR;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      complex thisTwiddle = twiddle(segmentK(i_itr, 1, 512), 1024);\n"
	"      unsigned int LeftIndex = (i_itr << 1);\n"
	"      complex LEFT = SBank[LeftIndex];\n"
	"      complex RIGHT = SBank[LeftIndex + 1];\n"
	"      complex storeL = cadd(LEFT, RIGHT);\n"
	"      complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"      buffer[o_itr * 2 + i_itr] = storeL;\n"
	"      buffer[o_itr * 2 + i_itr + 512] = storeR;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	;

};