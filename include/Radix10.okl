#ifndef ROOTISBASH  
#include "../include/kernel.okl"
#else
#include "./include/kernel.okl"
#endif


@kernel void preprocessed_ODW10_STH_STFT(
    float* inData,
    const unsigned int qtConst,
    const unsigned int fullSize,
    const unsigned int OMove,
    const unsigned int OHalfSize,
    complex* bufferOut)
{
    for(unsigned int o_itr=0; o_itr < OHalfSize; o_itr += 512; @outer)
    {
        @shared complex FBank[1024];
        @shared complex SBank[1024];
        @shared float   windowAdded[512];
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)//overlap and extends
        {
            unsigned int q_itr = o_itr >> 9;
            unsigned int idx = q_itr * OMove + i_itr;
            unsigned int Ridx = q_itr * OMove + i_itr + 512;
            int isOverflowed = (idx < fullSize);
            int RisOverflowed= (Ridx< fullSize);
            idx *= isOverflowed;
            Ridx*=RisOverflowed;
            FBank[i_itr].real = inData[idx] * isOverflowed;
            FBank[i_itr].imag = 0;
            FBank[i_itr + 512].real = inData[Ridx] * RisOverflowed;
            FBank[i_itr + 512].imag = 0;
        }

        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)//removing DC
        {
            float Dpoint = FBank[i_itr].real;
            float Apoint = FBank[i_itr + (512)].real;
            windowAdded[i_itr] = (Dpoint + Apoint);
        }

        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 256, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 128, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 64, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 32, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 16, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 8, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 4, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 2, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 1, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            FBank[i_itr].real -= (windowAdded[0] / 1024.0);
            FBank[i_itr].real *= window_func(i_itr, 1024);
            FBank[i_itr + 512].real -= (windowAdded[0] / 1024.0);
            FBank[i_itr + 512].real *= window_func(i_itr + 512, 1024);
        }

        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            complex thisTwiddle = twiddle(segmentK(i_itr, 512, 512), 1024);
            
            complex LEFT = FBank[i_itr];
            complex RIGHT= FBank[i_itr + 512];
            complex storeL = cadd(LEFT, RIGHT);
            complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);
            SBank[i_itr] = storeL;
            SBank[i_itr + 512] = storeR;
        }

        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            OpSthmSecondTF(256, 255, 8, 9, 512, 1024);
        }

        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            OpSthmFirstTS(128, 127, 7, 8, 512, 1024)
        }

        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            OpSthmSecondTF(64, 63, 6, 7, 512, 1024)
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            OpSthmFirstTS(32, 31, 5, 6, 512, 1024)
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            OpSthmSecondTF(16, 15, 4, 5, 512, 1024)
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            OpSthmFirstTS(8, 7, 3, 4, 512, 1024)
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            OpSthmSecondTF(4, 3, 2, 3, 512, 1024)
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            OpSthmFirstTS(2, 1, 1, 2, 512, 1024)
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            complex thisTwiddle = twiddle(segmentK(i_itr, 1, 512), 1024);
            
            unsigned int LeftIndex =  (i_itr << 1);
            
            complex LEFT = SBank[LeftIndex];
            complex RIGHT= SBank[LeftIndex + 1];
            complex storeL = cadd(LEFT, RIGHT);
            complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);

            bufferOut[o_itr * 2 + i_itr] = storeL;
            bufferOut[o_itr * 2 + i_itr + 512] = storeR;
        }
    }
}


@kernel void preprocesses_ODW_10(
    float* inData,
    const unsigned int qtConst,
    const unsigned int fullSize,
    const unsigned int OMove,
    complex* bufferOut   
    )
{
    for(unsigned int o_itr=0; o_itr < qtConst; ++o_itr; @outer)
    {
        @shared complex windowBuffer[1024];
        @shared float   windowAdded[512];
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)//overlap and extends
        {
            unsigned int idx = o_itr * OMove + i_itr;
            unsigned int Ridx = o_itr * OMove + i_itr + 512;
            int isOverflowed = (idx < fullSize);
            int RisOverflowed= (Ridx< fullSize);
            idx *= isOverflowed;
            Ridx*=RisOverflowed;
            windowBuffer[i_itr].real = inData[idx] * isOverflowed;
            windowBuffer[i_itr].imag = 0;
            windowBuffer[i_itr + 512].real = inData[Ridx] * RisOverflowed;
            windowBuffer[i_itr + 512].imag = 0;
            
        }

        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)//removing DC
        {
            unsigned int inRange = i_itr < 512;
            float Dpoint = windowBuffer[i_itr].real;
            float Apoint = windowBuffer[i_itr + (512 * inRange)].real;
            windowAdded[i_itr] = (Dpoint + Apoint) * inRange;
        }

        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 256, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 128, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 64, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 32, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 16, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 8, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 4, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 2, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 1, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            windowBuffer[i_itr].real -= (windowAdded[0] / 1024.0);
            windowBuffer[i_itr + 512].real -= (windowAdded[0] / 1024.0);
            windowBuffer[i_itr].real *= window_func(i_itr, 1024);
            windowBuffer[i_itr + 512].real *= window_func(i_itr + 512, 1024);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {

            bufferOut[o_itr * 1024 + i_itr] = windowBuffer[i_itr];
            bufferOut[o_itr * 1024 + i_itr + 512] = windowBuffer[i_itr + 512];
            
        }
        
    }
}


@kernel void Stockhpotimized10(complex* buffer, const unsigned int OHalfSize)
{
    for(unsigned int o_itr = 0; o_itr < OHalfSize; o_itr += 512; @outer)
    {
        @shared complex FBank[1024];
        @shared complex SBank[1024];
        
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            complex thisTwiddle = twiddle(segmentK(i_itr, 512, 512), 1024);
            
            complex LEFT = buffer[o_itr * 2 + i_itr];
            complex RIGHT= buffer[o_itr * 2 + i_itr + 512];
            complex storeL = cadd(LEFT, RIGHT);
            complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);
            SBank[i_itr] = storeL;
            SBank[i_itr + 512] = storeR;
        }

        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            OpSthmSecondTF(256, 255, 8, 9, 512, 1024);
        }

        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            OpSthmFirstTS(128, 127, 7, 8, 512, 1024)
        }

        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            OpSthmSecondTF(64, 63, 6, 7, 512, 1024)
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            OpSthmFirstTS(32, 31, 5, 6, 512, 1024)
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            OpSthmSecondTF(16, 15, 4, 5, 512, 1024)
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            OpSthmFirstTS(8, 7, 3, 4, 512, 1024)
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            OpSthmSecondTF(4, 3, 2, 3, 512, 1024)
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            OpSthmFirstTS(2, 1, 1, 2, 512, 1024)
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            complex thisTwiddle = twiddle(segmentK(i_itr, 1, 512), 1024);
            
            unsigned int LeftIndex =  (i_itr << 1);
            
            complex LEFT = SBank[LeftIndex];
            complex RIGHT= SBank[LeftIndex + 1];
            complex storeL = cadd(LEFT, RIGHT);
            complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);

            buffer[o_itr * 2 + i_itr] = storeL;
            buffer[o_itr * 2 + i_itr + 512] = storeR;
        }
    }
}