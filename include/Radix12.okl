#ifndef ROOTISBASH  
#include "../include/kernel.okl"
#else
#include "./include/kernel.okl"
#endif

#define CUSTOM_FOR(CODES) DFOR(0, 1024, 2048, CODES)


@kernel void preprocesses_ODW_12(
    float* inData,
    const unsigned int qtConst,
    const unsigned int fullSize,
    const unsigned int OMove,
    complex* bufferOut   
    )
{
    for(unsigned int o_itr=0; o_itr < qtConst; ++o_itr; @outer)
    {
        @shared complex windowBuffer[4096];

        CUSTOM_FOR(
            unsigned int idx = o_itr * OMove + i_itr;
            unsigned int Ridx = o_itr * OMove + i_itr + 2048;
            int isOverflowed = (idx < fullSize);
            int RisOverflowed= (Ridx< fullSize);
            idx *= isOverflowed;
            Ridx*=RisOverflowed;
            windowBuffer[i_itr].real = inData[idx] * isOverflowed;
            windowBuffer[i_itr].imag = 0;
            windowBuffer[i_itr + 2048].real = inData[Ridx] * RisOverflowed;
            windowBuffer[i_itr + 2048].imag = 0;
        )

        CUSTOM_FOR(
            float Dpoint = windowBuffer[i_itr].real;
            float Apoint = windowBuffer[i_itr + (2048)].real;
            windowBuffer[i_itr].imag = (Dpoint + Apoint);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 1024, windowBuffer);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 512, windowBuffer);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 256, windowBuffer);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 128, windowBuffer);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 64, windowBuffer);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 32, windowBuffer);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 16, windowBuffer);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 8, windowBuffer);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 4, windowBuffer);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 2, windowBuffer);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 1, windowBuffer);
        )
        CUSTOM_FOR(
            windowBuffer[i_itr].real -= (windowBuffer[0].imag / 4096.0);
            windowBuffer[i_itr + 2048].real -= (windowBuffer[0].imag / 4096.0);
            windowBuffer[i_itr].real *= window_func(i_itr, 4096);
            windowBuffer[i_itr + 2048].real *= window_func(i_itr + 2048, 4096);
        )
        CUSTOM_FOR(
            windowBuffer[i_itr].imag = 0;
            windowBuffer[i_itr + 2048].imag = 0;
            
            bufferOut[o_itr * 4096 + i_itr] = windowBuffer[i_itr];
            bufferOut[o_itr * 4096 + i_itr + 2048] = windowBuffer[i_itr + 2048];
        )   
    }
}




@kernel void Stockhpotimized12(complex* buffer, const unsigned int OHalfSize)
{
    for(unsigned int o_itr = 0; o_itr < OHalfSize; o_itr += 2048; @outer)
    {
        @shared complex FBank[4096];
        @shared complex SBank[4096];
        
        CUSTOM_FOR(
        {
            complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 2048), 4096);
            
            complex LEFT = buffer[o_itr * 2 + i_itr];
            complex RIGHT= buffer[o_itr * 2 + i_itr + 2048];
            complex storeL = cadd(LEFT, RIGHT);
            complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);
            FBank[i_itr] = storeL;
            FBank[i_itr + 2048] = storeR;
        }
        )

        CUSTOM_FOR(
            OpSthmFirstTS(1024, 1023, 10, 11, 2048, 4096);
        )

        CUSTOM_FOR(
            OpSthmSecondTF(512, 511, 9, 10, 2048, 4096);
        )

        CUSTOM_FOR(
            OpSthmFirstTS(256, 255, 8, 9, 2048, 4096)
        )

        CUSTOM_FOR(
            OpSthmSecondTF(128, 127, 7, 8, 2048, 4096)
        )
        CUSTOM_FOR(
            OpSthmFirstTS(64, 63, 6, 7, 2048, 4096)
        )
        CUSTOM_FOR(
            OpSthmSecondTF(32, 31, 5, 6, 2048, 4096)
        )
        CUSTOM_FOR(
            OpSthmFirstTS(16, 15, 4, 5, 2048, 4096)
        )
        CUSTOM_FOR(
            OpSthmSecondTF(8, 7, 3, 4, 2048, 4096)
        )
        CUSTOM_FOR(
            OpSthmFirstTS(4, 3, 2, 3, 2048, 4096)
        )
        CUSTOM_FOR(
            OpSthmSecondTF(2, 1, 1, 2, 2048, 4096)
        )
        CUSTOM_FOR(
            complex thisTwiddle = twiddle(segmentK(i_itr, 1, 2048), 4096);
            
            unsigned int LeftIndex =  (i_itr << 1);
            
            complex LEFT = FBank[LeftIndex];
            complex RIGHT= FBank[LeftIndex + 1];
            complex storeL = cadd(LEFT, RIGHT);
            complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);

            buffer[o_itr * 2 + i_itr] = storeL;
            buffer[o_itr * 2 + i_itr + 2048] = storeR;
        )
    }
}


@kernel void preprocessed_ODW12_STH_STFT(
    float* inData,
    const unsigned int qtConst,
    const unsigned int fullSize,
    const unsigned int OMove,
    const unsigned int OHalfSize,
    complex* bufferOut)
{
    for(unsigned int o_itr=0; o_itr < OHalfSize; o_itr += 2048; @outer)
    {
        @shared complex FBank[4096];
        @shared complex SBank[4096];
        
        CUSTOM_FOR(//overlap and extends
        
            unsigned int q_itr = o_itr >> 11;
            unsigned int idx = q_itr * OMove + i_itr;
            unsigned int Ridx = q_itr * OMove + i_itr + 2048;
            int isOverflowed = (idx < fullSize);
            int RisOverflowed= (Ridx< fullSize);
            idx *= isOverflowed;
            Ridx*=RisOverflowed;
            FBank[i_itr].real = inData[idx] * isOverflowed;
            FBank[i_itr].imag = 0;
            FBank[i_itr + 2048].real = inData[Ridx] * RisOverflowed;
            FBank[i_itr + 2048].imag = 0;
        )

        CUSTOM_FOR(//removing DC
        
            float Dpoint = FBank[i_itr].real;
            float Apoint = FBank[i_itr + (2048)].real;
            FBank[i_itr].imag = (Dpoint + Apoint);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 1024, FBank);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 512, FBank);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 256, FBank);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 128, FBank);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 64, FBank);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 32, FBank);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 16, FBank);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 8, FBank);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 4, FBank);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 2, FBank);
        )
        CUSTOM_FOR(
            DaCAdd(i_itr, 1, FBank);
        )
        CUSTOM_FOR(
            FBank[i_itr].real -= (FBank[0].imag / 4096.0);
            FBank[i_itr].real *= window_func(i_itr, 4096);
            FBank[i_itr + 2048].real -= (FBank[0].imag / 4096.0);
            FBank[i_itr + 2048].real *= window_func(i_itr + 2048, 4096);
        )

        CUSTOM_FOR(
            complex thisTwiddle = twiddle(segmentK(i_itr, 2048, 2048), 4096);
            FBank[i_itr].imag = 0;
            FBank[i_itr + 2048].imag = 0;
            complex LEFT = FBank[i_itr];
            complex RIGHT= FBank[i_itr + 2048];
            complex storeL = cadd(LEFT, RIGHT);
            complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);
            SBank[i_itr] = storeL;
            SBank[i_itr + 2048] = storeR;
        )

        CUSTOM_FOR(
            OpSthmSecondTF(1024, 1023, 10, 11, 2048, 4096);
        )

        CUSTOM_FOR(
            OpSthmFirstTS(512, 511, 9, 10, 2048, 4096);
        )

        CUSTOM_FOR(
            OpSthmSecondTF(256, 255, 8, 9, 2048, 4096)
        )

        CUSTOM_FOR(
            OpSthmFirstTS(128, 127, 7, 8, 2048, 4096)
        )
        CUSTOM_FOR(
            OpSthmSecondTF(64, 63, 6, 7, 2048, 4096)
        )
        CUSTOM_FOR(
            OpSthmFirstTS(32, 31, 5, 6, 2048, 4096)
        )
        CUSTOM_FOR(
            OpSthmSecondTF(16, 15, 4, 5, 2048, 4096)
        )
        CUSTOM_FOR(
            OpSthmFirstTS(8, 7, 3, 4, 2048, 4096)
        )
        CUSTOM_FOR(
            OpSthmSecondTF(4, 3, 2, 3, 2048, 4096)
        )
        CUSTOM_FOR(
            OpSthmFirstTS(2, 1, 1, 2, 2048, 4096)
        )
        CUSTOM_FOR(
            complex thisTwiddle = twiddle(segmentK(i_itr, 1, 2048), 4096);
            
            unsigned int LeftIndex =  (i_itr << 1);
            
            complex LEFT = SBank[LeftIndex];
            complex RIGHT= SBank[LeftIndex + 1];
            complex storeL = cadd(LEFT, RIGHT);
            complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);

            bufferOut[o_itr * 2 + i_itr] = storeL;
            bufferOut[o_itr * 2 + i_itr + 2048] = storeR;
        )
    }
}
#undef CUSTOM_FOR