@startuml ProxySide
class STFTProxy{
    on window RUNNER_INFO = PROCESS_INFORMATION
    on posix  RUNNER_INFO = pid_t
    using MAYBE_RUNNER = std::optional<RUNNER_INFO>
    using MAYBE_FUTURE_DATA = std::optional<std::future<FFTRequest>>
    using ERR_FUNC = std::function<void(const ix::WebSocketErrorInfo& )>
    using PROMISE_DATA = std::promise<FFTRequest>

    -runnerHandle:MAYBE_RUNNER
    -proxyOBJ: ix::WebSocket
    -fallback: FallbackList
    -errorHandler: ERR_FUNC
    -gpuType: SuppertedRuntimes
    -promiseCounter: unsigned long long
    -RuntimeFallback()
    -SetWebSocketCallback()
    -LoadToRequest(vector<float> data, int windowRadix, float overlapRate) -> FFTRequest
    -Disconnect();

    +workingPromises:unordered_map<std::string, PROMISE_DATA> 
    +STATUS:string
    +tryConnect(PATH path) -> bool
    +RequestSTFT(vector<float> data, int windowRadix, float overlapRate) -> MAYBE_FUTURE_DATA
    +STFTProxy(ERR_FUNC errorCallback, FallbackList fbList)
    +~STFTProxy()
}

class FallbackList{
    using STRVEC = std::vector<std::string>
    using PATH      = std::pair<SupportedRuntimes, std::string>
    using MAYBE_PATH= std::optional<PATH>
    +CUDAFallback:STRVEC
    +OpenCLFallback:STRVEC
    +OpenMPFallback:STRVEC
    +SerialFallback:STRVEC
    +getNext() -> MAYBE_PATH
    -VectorITR<template SuppertedRuntimes>(STRVEC vec, PATH result) -> bool
}

class FFTRequest{
    using BIN           = std::string
    using MAYBE_DATA    = std::optional<std::vector<float>>
    using MAYBE_MEMORY  = std::optional<std::string>
    using CULL          = const unsigned long long
    using ULL           = unsigned long long
    -windowRadix: int
    -overlapRate: float
    -dataLength: ULL
    -data: MAYBE_DATA
    -IPCsharedMemoryPath: MAYBE_MEMORY
    -__mappedID:string
    -__POSIX_FileDes:int
    -__WINDOWS_HANDLEPtr:void*
    -asjustToPage() -> ULL
    +FFTRequest()
    +FFTRequest(int WindoeRadix, float OverlapRate, ULL counter)
    +Serialize() -> BIN
    +Deserialize(BIN binData)
    +MakeSharedMemory(SupportedRuntimes Type, CULL dataSize)
    +SetData(vector<float> data)
    +getData() -> MAYBE_DATA
    +getID() -> std::string
}

enum SupportedRuntimes{
    CUDA
    OPENCL
    OPENMP
    SERVER
    SERIAL
}

class namespace_RuntimeCheck{

    on window RUNNER_INFO = PROCESS_INFORMATION
    on posix  RUNNER_INFO = pid_t
    using MAYBE_RUNNER = std::optional<RUNNER_INFO>
    +isAvailable(PATH): bool
    +ExcuteRunner(std::string executePath): MAYBE_RUNNER [[nodiscard]]
    +KillRunner(MAYBE_RUNNER runner): bool
    +GracefullyTerminate(RUNNER_INFO runner): bool
}


class IXWebsocket

STFTProxy ..> FallbackList
STFTProxy ..> FFTRequest
STFTProxy ..> IXWebsocket
STFTProxy --> namespace_RuntimeCheck

class Genv
class Gcodes

class RunnerInterface{
    using VECF=std::vector<float>
    using MAYBE_DATA= std::optional<VECF>
    -InitEnv()
    -BuildKernel()
    -ServerInit()
    -serverObj:WebSocketServer
    -ActivateSTFT(  VECF inData,
                    int windowRadix
                    float overlapRatio)-> MAYBE_DATA
    -Activate(BIN bindata) -> FFTRequest
    -env:Genv
    -kens:Gcodes
    +STFT()
    +~STFT()
}

class CudaImpl
class OpenCLImpl
class OpenMPImpl
class SerialImpl
class CommonImpl
RunnerInterface ..> FFTRequest
RunnerInterface ..> IXWebsocket
RunnerInterface ..> Genv
RunnerInterface ..> Gcodes

CudaImpl ..|> Genv
CudaImpl ..|> Gcodes
CudaImpl ..|> RunnerInterface

OpenCLImpl ..|> Genv
OpenCLImpl ..|> Gcodes
OpenCLImpl ..|> RunnerInterface

OpenMPImpl ..|> Genv
OpenMPImpl ..|> Gcodes
OpenMPImpl ..|> RunnerInterface

SerialImpl ..|> Genv
SerialImpl ..|> Gcodes
SerialImpl ..|> RunnerInterface

CommonImpl ..|> RunnerInterface
@enduml