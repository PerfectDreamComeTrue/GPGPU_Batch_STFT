#pragma OPENCL EXTENSION cl_khr_fp64 : enable//#include <math.h>//#include <stdio.h>typedef struct complex_t {  float real, imag;} complex;

typedef struct pairs_t {
      int first, second;
} pairs;

inline float window_func(const int index,
", ' ' <repeats 25 times>, "const int window_size);

inline float window_func(const int index,
", ' ' <repeats 25 times>, "const int window_size) {
      float first = cos(
        M_PI * 2.0 * (float) index / (float) window_size
  );
  float second = cos(
        M_PI * 4.0 * (float) index / (float) window_size
  );
  return (0.42 - 0.5 * first + 0.08 * second);
}

inline int reverseBits(int num,
", ' ' <repeats 23 times>, "int radix_2_data);

inline int reverseBits(int num,
", ' ' <repeats 23 times>, "int radix_2_data) {
      int reversed = 0;
  for (int i = 0; i < radix_2_data; ++i) {
        reversed = (reversed << 1) | (num & 1);
    num >>= 1;
  }
  return reversed;
}

pairs indexer(const unsigned int ID,
", ' ' <repeats 14 times>, "const int powed_stage);

pairs indexer(const unsigned int ID,
", ' ' <repeats 14 times>, "const int powed_stage) {
      pairs temp;
  temp.first = (ID % (powed_stage)) + powed_stage * 2 * (ID / powed_stage);
  temp.second = temp.first + powed_stage;
  return temp;
}

complex twiddle(int high,
", ' ' <repeats 16 times>, "int low);

complex twiddle(int high,
", ' ' <repeats 16 times>, "int low) {
      complex temp;
  float angle = 2.0 * ((float) high / (float) low);
    temp.real = cos(angle * M_PI);
    temp.imag = -1.0 * sin(angle * M_PI);
    return temp;
  }
  
  inline complex cmult(const complex a,
  ", ' ' <repeats 21 times>, "const complex b);
  
  inline complex cmult(const complex a,
  ", ' ' <repeats 21 times>, "const complex b) {
      complex result;
    result.real = a.real * b.real - a.imag * b.imag;
    result.imag = a.real * b.imag + a.imag * b.real;
    return result;
  }
  
  inline complex cadd(complex a,
  ", ' ' <repeats 20 times>, "const complex b);
  
  inline complex cadd(complex a,
  ", ' ' <repeats 20 times>, "const complex b) {
      a.real += b.real;
    a.imag += b.imag;
    return a;
  }
  
  inline complex csub(complex a,
  ", ' ' <repeats 20 times>, "const complex b);
  
  inline complex csub(complex a,
  ", ' ' <repeats 20 times>, "const complex b) {
      a.real -= b.real;
    a.imag -= b.imag;
    return a;
  }
  
  inline float cmod(complex a);
  
  inline float cmod(complex a) {
      return (sqrt(
        a.real * a.real + a.imag * a.imag
    ));
  }
  
  float sums = 0;
  
  // quot = (fullSize / overlap_ratio) / overlap_ratio / window_size
  __kernel void _occa_STFT_0(__global float * in,
  ", ' ' <repeats 27 times>, "__global float * out,
  ", ' ' <repeats 27 times>, "__global complex * buffer,
  ", ' ' <repeats 27 times>, "unsigned int fullSize,
  ", ' ' <repeats 27 times>, "int windowSize,
  ", ' ' <repeats 27 times>, "int quot,
  ", ' ' <repeats 27 times>, "unsigned int OWSize,
  ", ' ' <repeats 27 times>, "int radixData);
  
  __kernel void _occa_STFT_0(__global float * in,
  ", ' ' <repeats 27 times>, "__global float * out,
  ", ' ' <repeats 27 times>, "__global complex * buffer,
  ", ' ' <repeats 27 times>, "unsigned int fullSize,
  ", ' ' <repeats 27 times>, "int windowSize,
  ", ' ' <repeats 27 times>, "int quot,
  ", ' ' <repeats 27 times>, "unsigned int OWSize,
  ", ' ' <repeats 27 times>, "int radixData) {
      {
        int once_val = 0 + get_group_id(0);
      {
          unsigned int i = 0 + get_local_id(0);
        sums += in[i];
        barrier(CLK_LOCAL_MEM_FENCE);
        in[i] -= (sums / (float) fullSize);
      }
        }
      }
      
      __kernel void _occa_STFT_1(__global float * in,
      ", ' ' <repeats 27 times>, "__global float * out,
      ", ' ' <repeats 27 times>, "__global complex * buffer,
      ", ' ' <repeats 27 times>, "unsigned int fullSize,
      ", ' ' <repeats 27 times>, "int windowSize,
      ", ' ' <repeats 27 times>, "int quot,
      ", ' ' <repeats 27 times>, "unsigned int OWSize,
      ", ' ' <repeats 27 times>, "int radixData);
      
      __kernel void _occa_STFT_1(__global float * in,
      ", ' ' <repeats 27 times>, "__global float * out,
      ", ' ' <repeats 27 times>, "__global complex * buffer,
      ", ' ' <repeats 27 times>, "unsigned int fullSize,
      ", ' ' <repeats 27 times>, "int windowSize,
      ", ' ' <repeats 27 times>, "int quot,
      ", ' ' <repeats 27 times>, "unsigned int OWSize,
      ", ' ' <repeats 27 times>, "int radixData) {
          {
            int w_num = 0 + get_group_id(0);
          {
              int w_itr = 0 + get_local_id(0);
            unsigned int read_point = w_num * OWSize + w_itr;
            buffer[w_num * windowSize + w_itr].real = read_point > fullSize ? 0.0 : in[w_num * OWSize + w_itr] * window_func(
                w_itr,
              windowSize
            );
          }
        }
      }
      
      __kernel void _occa_STFT_2(__global float * in,
      ", ' ' <repeats 27 times>, "__global float * out,
      ", ' ' <repeats 27 times>, "__global complex * buffer,
      ", ' ' <repeats 27 times>, "unsigned int fullSize,
      ", ' ' <repeats 27 times>, "int windowSize,
      ", ' ' <repeats 27 times>, "int quot,
      ", ' ' <repeats 27 times>, "unsigned int OWSize,
      ", ' ' <repeats 27 times>, "int radixData);
      
      __kernel void _occa_STFT_2(__global float * in,
      ", ' ' <repeats 27 times>, "__global float * out,
      ", ' ' <repeats 27 times>, "__global complex * buffer,
      ", ' ' <repeats 27 times>, "unsigned int fullSize,
      ", ' ' <repeats 27 times>, "int windowSize,
      ", ' ' <repeats 27 times>, "int quot,
      ", ' ' <repeats 27 times>, "unsigned int OWSize,
      ", ' ' <repeats 27 times>, "int radixData) {
          {
            int w_num = 0 + get_group_id(0);
          {
              int w_itr = 0 + get_local_id(0);
            float data = buffer[w_num * windowSize + w_itr].real;
            int dst_idx = reverseBits(w_num * windowSize + w_itr, radixData);
            barrier(CLK_LOCAL_MEM_FENCE);
            buffer[dst_idx].real = data;
          }
        }
      }
      
      __kernel void _occa_STFT_3(__global float * in,
      ", ' ' <repeats 27 times>, "__global float * out,
      ", ' ' <repeats 27 times>, "__global complex * buffer,
      ", ' ' <repeats 27 times>, "unsigned int fullSize,
      ", ' ' <repeats 27 times>, "int windowSize,
      ", ' ' <repeats 27 times>, "int quot,
      ", ' ' <repeats 27 times>, "unsigned int OWSize,
      ", ' ' <repeats 27 times>, "int radixData);
      
      __kernel void _occa_STFT_3(__global float * in,
      ", ' ' <repeats 27 times>, "__global float * out,
      ", ' ' <repeats 27 times>, "__global complex * buffer,
      ", ' ' <repeats 27 times>, "unsigned int fullSize,
      ", ' ' <repeats 27 times>, "int windowSize,
      ", ' ' <repeats 27 times>, "int quot,
      ", ' ' <repeats 27 times>, "unsigned int OWSize,
      ", ' ' <repeats 27 times>, "int radixData) {
          {
            int w_num = 0 + get_group_id(0);
          {
              int w_itr = 0 + get_local_id(0);
            unsigned int GID = w_num * windowSize / 2 + w_itr;
            stage;
            int powed_stage = 1 << stage;
            pairs butterfly_target = indexer(GID, powed_stage);
            complex this_twiddle = twiddle(GID % powed_stage, powed_stage * 2);
            this_twiddle = cmult(
                buffer[butterfly_target.second],
              this_twiddle
            );
            complex tempx = cadd(buffer[butterfly_target.first], this_twiddle);
            complex tempy = csub(
                buffer[butterfly_target.second],
              this_twiddle
            );
            barrier(CLK_LOCAL_MEM_FENCE);
            buffer[butterfly_target.first] = tempx;
            buffer[butterfly_target.second] = tempy;
          }
        }
      }
      
      __kernel void _occa_STFT_4(__global float * in,
      ", ' ' <repeats 27 times>, "__global float * out,
      ", ' ' <repeats 27 times>, "__global complex * buffer,
      ", ' ' <repeats 27 times>, "unsigned int fullSize,
      ", ' ' <repeats 27 times>, "int windowSize,
      ", ' ' <repeats 27 times>, "int quot,
      ", ' ' <repeats 27 times>, "unsigned int OWSize,
      ", ' ' <repeats 27 times>, "int radixData);
      
      __kernel void _occa_STFT_4(__global float * in,
      ", ' ' <repeats 27 times>, "__global float * out,
      ", ' ' <repeats 27 times>, "__global complex * buffer,
      ", ' ' <repeats 27 times>, "unsigned int fullSize,
      ", ' ' <repeats 27 times>, "int windowSize,
      ", ' ' <repeats 27 times>, "int quot,
      ", ' ' <repeats 27 times>, "unsigned int OWSize,
      ", ' ' <repeats 27 times>, "int radixData) {
          {
            int w_num = 0 + get_group_id(0);
          {
              int w_itr = 0 + get_local_id(0);
                    unsigned int GID = w_num * windowSize + w_itr;
                    float powered = cmod(buffer[GID]);
                    out[w_num * windowSize / 2 + w_itr] = powered;
                  }
                }
              }
              
              "
