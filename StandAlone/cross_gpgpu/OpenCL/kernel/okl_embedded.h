
#pragma once
//generated with python code
#include <string>
class okl_embed {
    public:
    std::string radixALL = 
	"#pragma OPENCL EXTENSION cl_khr_fp64 : enable\n"
	"\n"
	"// #include <math.h>\n"
	"\n"
	"typedef struct complex_t {\n"
	"  float real, imag;\n"
	"} complex;\n"
	"\n"
	"typedef struct pairs_t {\n"
	"  unsigned int first, second;\n"
	"} pairs;\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size);\n"
	"\n"
	"inline float window_func(const int index,\n"
	"                         const int window_size) {\n"
	"  float normalized_index = (float) index;\n"
	"  normalized_index /= ((float) (window_size - 1));\n"
	"  float angle = 2.0f * M_PI * normalized_index;\n"
	"  return 0.5f * (1.0f - cos(angle));\n"
	"}\n"
	"\n"
	"inline float hanning_window(const int index,\n"
	"                            const int windowSize);\n"
	"\n"
	"inline float hanning_window(const int index,\n"
	"                            const int windowSize) {\n"
	"  float angle = 2.0 * M_PI * index / ((float) (windowSize - 1));\n"
	"  return 0.5 * (1.0 - cos(angle));\n"
	"}\n"
	"\n"
	"inline float hamming_window(const int index,\n"
	"                            const int windowSize);\n"
	"\n"
	"inline float hamming_window(const int index,\n"
	"                            const int windowSize) {\n"
	"  float angle = 2.0 * M_PI * index / ((float) (windowSize - 1));\n"
	"  return 0.54 - (0.46 * cos(angle));\n"
	"}\n"
	"\n"
	"inline float blackman_window(const int index,\n"
	"                             const int windowSize);\n"
	"\n"
	"inline float blackman_window(const int index,\n"
	"                             const int windowSize) {\n"
	"  float Fangle = 2.0 * M_PI * index / ((float) (windowSize));\n"
	"  float Sangle = Fangle * 2.0;\n"
	"  return 0.42 - 0.5 * cos(Fangle) + 0.08 * cos(Sangle);\n"
	"}\n"
	"\n"
	"inline float nuttall_window(const int index,\n"
	"                            const int windowSize);\n"
	"\n"
	"inline float nuttall_window(const int index,\n"
	"                            const int windowSize) {\n"
	"  float Fangle = 2.0 * M_PI * index / ((float) (windowSize));\n"
	"  float Sangle = Fangle * 2.0;\n"
	"  float Tangle = Fangle * 3.0;\n"
	"  return 0.355768 - 0.487396 * cos(Fangle) + 0.144232 * cos(Sangle) - 0.012604 * cos(\n"
	"    Tangle\n"
	"  );\n"
	"}\n"
	"\n"
	"inline float blackman_nuttall_window(const int index,\n"
	"                                     const int windowSize);\n"
	"\n"
	"inline float blackman_nuttall_window(const int index,\n"
	"                                     const int windowSize) {\n"
	"  float Fangle = 2.0 * M_PI * index / ((float) (windowSize));\n"
	"  float Sangle = Fangle * 2.0;\n"
	"  float Tangle = Fangle * 3.0;\n"
	"  return 0.3635819 - 0.4891775 * cos(Fangle) + 0.1365995 * cos(Sangle) - 0.0106411 * cos(\n"
	"    Tangle\n"
	"  );\n"
	"}\n"
	"\n"
	"inline float blackman_harris_window(const int index,\n"
	"                                    const int windowSize);\n"
	"\n"
	"inline float blackman_harris_window(const int index,\n"
	"                                    const int windowSize) {\n"
	"  float Fangle = 2.0 * M_PI * index / ((float) (windowSize));\n"
	"  float Sangle = Fangle * 2.0;\n"
	"  float Tangle = Fangle * 3.0;\n"
	"  return 0.35875 - 0.48829 * cos(Fangle) + 0.14128 * cos(Sangle) - 0.01168 * cos(\n"
	"    Tangle\n"
	"  );\n"
	"}\n"
	"\n"
	"inline float flatTop_window(const int index,\n"
	"                            const int windowSize);\n"
	"\n"
	"inline float flatTop_window(const int index,\n"
	"                            const int windowSize) {\n"
	"  float Fangle = 2.0 * M_PI * index / ((float) (windowSize));\n"
	"  float Sangle = Fangle * 2.0;\n"
	"  float Tangle = Fangle * 3.0;\n"
	"  float FFangle = Fangle * 4.0;\n"
	"  return 0.21557895 - 0.41663158 * cos(Fangle) + 0.277263158 * cos(Sangle) - 0.083578947 * cos(\n"
	"    Tangle\n"
	"  ) + 0.006947368 * cos(FFangle);\n"
	"}\n"
	"\n"
	"inline float gaussian_window(const int index,\n"
	"                             const int windowSize,\n"
	"                             const float sigma);\n"
	"\n"
	"inline float gaussian_window(const int index,\n"
	"                             const int windowSize,\n"
	"                             const float sigma) {\n"
	"  const int HWinSize = windowSize >> 1;\n"
	"  float angle = ((float) (index - HWinSize)) / ((float) (HWinSize * sigma));\n"
	"  angle *= angle;\n"
	"  angle *= -0.5;\n"
	"  return exp(angle);\n"
	"}\n"
	"\n"
	"pairs indexer(const unsigned int firstMaximumID,\n"
	"              const int powed_stage);\n"
	"\n"
	"pairs indexer(const unsigned int firstMaximumID,\n"
	"              const int powed_stage) {\n"
	"  pairs temp;\n"
	"  temp.first = firstMaximumID + (firstMaximumID & (~(powed_stage - 1)));\n"
	"  temp.second = temp.first + powed_stage;\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"inline int segmentK(const int lsave,\n"
	"                    const int segmentSize,\n"
	"                    const int HwindowSize);\n"
	"\n"
	"inline int segmentK(const int lsave,\n"
	"                    const int segmentSize,\n"
	"                    const int HwindowSize) {\n"
	"  return ((lsave % segmentSize) * HwindowSize) / segmentSize;\n"
	"}\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize);\n"
	"\n"
	"complex twiddle(int k,\n"
	"                int windowSize) {\n"
	"  complex temp;\n"
	"  float angle = -2.0 * M_PI * ((float) k / (float) windowSize);\n"
	"  temp.real = cos(angle);\n"
	"  temp.imag = sin(angle);\n"
	"  return temp;\n"
	"}\n"
	"\n"
	"inline float RMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib);\n"
	"\n"
	"inline float RMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib) {\n"
	"  return (Ra * Rb) - (Ia * Ib);\n"
	"}\n"
	"\n"
	"inline float IMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib);\n"
	"\n"
	"inline float IMult(const float Ra,\n"
	"                   const float Rb,\n"
	"                   const float Ia,\n"
	"                   const float Ib) {\n"
	"  return (Ra * Ib) + (Ia * Rb);\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_toPower_0(__global float * out,\n"
	"                      __global float * Real,\n"
	"                      __global float * Imag,\n"
	"                      const unsigned int OFullSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_toPower_0(__global float * out,\n"
	"                      __global float * Real,\n"
	"                      __global float * Imag,\n"
	"                      const unsigned int OFullSize) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (64 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      const unsigned int GID = o_itr + i_itr;\n"
	"      float R = Real[GID];\n"
	"      float I = Imag[GID];\n"
	"      out[GID] = sqrt(R * R + I * I);\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(32,1,1)))\n"
	" void _occa_toHalfComplexFormat_0(__global complex * out,\n"
	"                                  __global float * Real,\n"
	"                                  __global float * Imag,\n"
	"                                  const unsigned int OHalfSize,\n"
	"                                  const int windowRadix);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(32,1,1)))\n"
	" void _occa_toHalfComplexFormat_0(__global complex * out,\n"
	"                                  __global float * Real,\n"
	"                                  __global float * Imag,\n"
	"                                  const unsigned int OHalfSize,\n"
	"                                  const int windowRadix) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (32 * get_group_id(0));\n"
	"    {\n"
	"      unsigned int i_itr = 0 + get_local_id(0);\n"
	"      const unsigned int GID = o_itr + i_itr;\n"
	"      const unsigned int Mradix = windowRadix - 1;\n"
	"      const unsigned int HwindowSize = 1 << Mradix;\n"
	"      const unsigned int windowItr = GID % (HwindowSize);\n"
	"      const unsigned int FwindowedLoc = GID >> Mradix;\n"
	"      const unsigned int ReadIdx = FwindowedLoc * HwindowSize + windowItr;\n"
	"      out[GID].real = Real[ReadIdx];\n"
	"      out[GID].imag = Imag[ReadIdx];\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(32,1,1)))\n"
	" void _occa_Stockhpotimized6_0(__global float * Rout,\n"
	"                               __global float * Iout,\n"
	"                               const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(32,1,1)))\n"
	" void _occa_Stockhpotimized6_0(__global float * Rout,\n"
	"                               __global float * Iout,\n"
	"                               const unsigned int OHalfSize) {\n"
	"  __local float SIBank[64];\n"
	"  __local float SRBank[64];\n"
	"  __local float FIBank[64];\n"
	"  __local float FRBank[64];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (32 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      unsigned int GlobalItr = Gidx >> 5;\n"
	"      unsigned int GlobalIndex = (Gidx & (32 - 1));\n"
	"      Gidx = GlobalItr * 64 + GlobalIndex;\n"
	"      float LeftReal = Rout[Gidx];\n"
	"      float LeftImag = 0;\n"
	"      float RightReal = Rout[Gidx + 32];\n"
	"      float RightImag = 0;\n"
	"      unsigned int LeftStoreIdx = i_itr * 2;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 1;\n"
	"      complex tw = twiddle(segmentK(i_itr, 1, 32), 64);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 32];\n"
	"      float RightImag = FIBank[i_itr + 32];\n"
	"      unsigned int segmentItr = i_itr >> 1;\n"
	"      unsigned int segmentIndex = (i_itr & (2 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 4 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 2;\n"
	"      complex tw = twiddle(segmentK(i_itr, 2, 32), 64);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 32];\n"
	"      float RightImag = SIBank[i_itr + 32];\n"
	"      unsigned int segmentItr = i_itr >> 2;\n"
	"      unsigned int segmentIndex = (i_itr & (4 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 8 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 4;\n"
	"      complex tw = twiddle(segmentK(i_itr, 4, 32), 64);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 32];\n"
	"      float RightImag = FIBank[i_itr + 32];\n"
	"      unsigned int segmentItr = i_itr >> 3;\n"
	"      unsigned int segmentIndex = (i_itr & (8 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 16 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 8;\n"
	"      complex tw = twiddle(segmentK(i_itr, 8, 32), 64);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 32];\n"
	"      float RightImag = SIBank[i_itr + 32];\n"
	"      unsigned int segmentItr = i_itr >> 4;\n"
	"      unsigned int segmentIndex = (i_itr & (16 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 32 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 16;\n"
	"      complex tw = twiddle(segmentK(i_itr, 16, 32), 64);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      unsigned int GlobalItr = Gidx >> 5;\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 32];\n"
	"      float RightImag = FIBank[i_itr + 32];\n"
	"      unsigned int LeftStoreIdx = i_itr + GlobalItr * 64;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 32;\n"
	"      complex tw = twiddle(segmentK(i_itr, 32, 32), 64);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      Rout[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      Iout[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      Rout[RightStoreIdx] = LeftReal - RTwid;\n"
	"      Iout[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Stockhpotimized7_0(__global float * Rout,\n"
	"                               __global float * Iout,\n"
	"                               const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Stockhpotimized7_0(__global float * Rout,\n"
	"                               __global float * Iout,\n"
	"                               const unsigned int OHalfSize) {\n"
	"  __local float SIBank[128];\n"
	"  __local float SRBank[128];\n"
	"  __local float FIBank[128];\n"
	"  __local float FRBank[128];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (64 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      unsigned int GlobalItr = Gidx >> 6;\n"
	"      unsigned int GlobalIndex = (Gidx & (64 - 1));\n"
	"      Gidx = GlobalItr * 128 + GlobalIndex;\n"
	"      float LeftReal = Rout[Gidx];\n"
	"      float LeftImag = 0;\n"
	"      float RightReal = Rout[Gidx + 64];\n"
	"      float RightImag = 0;\n"
	"      unsigned int LeftStoreIdx = i_itr * 2;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 1;\n"
	"      complex tw = twiddle(segmentK(i_itr, 1, 64), 128);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 64];\n"
	"      float RightImag = FIBank[i_itr + 64];\n"
	"      unsigned int segmentItr = i_itr >> 1;\n"
	"      unsigned int segmentIndex = (i_itr & (2 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 4 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 2;\n"
	"      complex tw = twiddle(segmentK(i_itr, 2, 64), 128);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 64];\n"
	"      float RightImag = SIBank[i_itr + 64];\n"
	"      unsigned int segmentItr = i_itr >> 2;\n"
	"      unsigned int segmentIndex = (i_itr & (4 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 8 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 4;\n"
	"      complex tw = twiddle(segmentK(i_itr, 4, 64), 128);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 64];\n"
	"      float RightImag = FIBank[i_itr + 64];\n"
	"      unsigned int segmentItr = i_itr >> 3;\n"
	"      unsigned int segmentIndex = (i_itr & (8 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 16 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 8;\n"
	"      complex tw = twiddle(segmentK(i_itr, 8, 64), 128);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 64];\n"
	"      float RightImag = SIBank[i_itr + 64];\n"
	"      unsigned int segmentItr = i_itr >> 4;\n"
	"      unsigned int segmentIndex = (i_itr & (16 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 32 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 16;\n"
	"      complex tw = twiddle(segmentK(i_itr, 16, 64), 128);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 64];\n"
	"      float RightImag = FIBank[i_itr + 64];\n"
	"      unsigned int segmentItr = i_itr >> 5;\n"
	"      unsigned int segmentIndex = (i_itr & (32 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 64 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 32;\n"
	"      complex tw = twiddle(segmentK(i_itr, 32, 64), 128);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      unsigned int GlobalItr = Gidx >> 6;\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 64];\n"
	"      float RightImag = SIBank[i_itr + 64];\n"
	"      unsigned int LeftStoreIdx = i_itr + GlobalItr * 128;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 64;\n"
	"      complex tw = twiddle(segmentK(i_itr, 64, 64), 128);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      Rout[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      Iout[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      Rout[RightStoreIdx] = LeftReal - RTwid;\n"
	"      Iout[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(128,1,1)))\n"
	" void _occa_Stockhpotimized8_0(__global float * Rout,\n"
	"                               __global float * Iout,\n"
	"                               const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(128,1,1)))\n"
	" void _occa_Stockhpotimized8_0(__global float * Rout,\n"
	"                               __global float * Iout,\n"
	"                               const unsigned int OHalfSize) {\n"
	"  __local float SIBank[256];\n"
	"  __local float SRBank[256];\n"
	"  __local float FIBank[256];\n"
	"  __local float FRBank[256];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (128 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      unsigned int GlobalItr = Gidx >> 7;\n"
	"      unsigned int GlobalIndex = (Gidx & (128 - 1));\n"
	"      Gidx = GlobalItr * 256 + GlobalIndex;\n"
	"      float LeftReal = Rout[Gidx];\n"
	"      float LeftImag = 0;\n"
	"      float RightReal = Rout[Gidx + 128];\n"
	"      float RightImag = 0;\n"
	"      unsigned int LeftStoreIdx = i_itr * 2;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 1;\n"
	"      complex tw = twiddle(segmentK(i_itr, 1, 128), 256);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 128];\n"
	"      float RightImag = FIBank[i_itr + 128];\n"
	"      unsigned int segmentItr = i_itr >> 1;\n"
	"      unsigned int segmentIndex = (i_itr & (2 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 4 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 2;\n"
	"      complex tw = twiddle(segmentK(i_itr, 2, 128), 256);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 128];\n"
	"      float RightImag = SIBank[i_itr + 128];\n"
	"      unsigned int segmentItr = i_itr >> 2;\n"
	"      unsigned int segmentIndex = (i_itr & (4 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 8 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 4;\n"
	"      complex tw = twiddle(segmentK(i_itr, 4, 128), 256);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 128];\n"
	"      float RightImag = FIBank[i_itr + 128];\n"
	"      unsigned int segmentItr = i_itr >> 3;\n"
	"      unsigned int segmentIndex = (i_itr & (8 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 16 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 8;\n"
	"      complex tw = twiddle(segmentK(i_itr, 8, 128), 256);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 128];\n"
	"      float RightImag = SIBank[i_itr + 128];\n"
	"      unsigned int segmentItr = i_itr >> 4;\n"
	"      unsigned int segmentIndex = (i_itr & (16 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 32 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 16;\n"
	"      complex tw = twiddle(segmentK(i_itr, 16, 128), 256);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 128];\n"
	"      float RightImag = FIBank[i_itr + 128];\n"
	"      unsigned int segmentItr = i_itr >> 5;\n"
	"      unsigned int segmentIndex = (i_itr & (32 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 64 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 32;\n"
	"      complex tw = twiddle(segmentK(i_itr, 32, 128), 256);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 128];\n"
	"      float RightImag = SIBank[i_itr + 128];\n"
	"      unsigned int segmentItr = i_itr >> 6;\n"
	"      unsigned int segmentIndex = (i_itr & (64 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 128 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 64;\n"
	"      complex tw = twiddle(segmentK(i_itr, 64, 128), 256);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      unsigned int GlobalItr = Gidx >> 7;\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 128];\n"
	"      float RightImag = FIBank[i_itr + 128];\n"
	"      unsigned int LeftStoreIdx = i_itr + GlobalItr * 256;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 128;\n"
	"      complex tw = twiddle(segmentK(i_itr, 128, 128), 256);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      Rout[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      Iout[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      Rout[RightStoreIdx] = LeftReal - RTwid;\n"
	"      Iout[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Stockhpotimized9_0(__global float * Rout,\n"
	"                               __global float * Iout,\n"
	"                               const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_Stockhpotimized9_0(__global float * Rout,\n"
	"                               __global float * Iout,\n"
	"                               const unsigned int OHalfSize) {\n"
	"  __local float SIBank[512];\n"
	"  __local float SRBank[512];\n"
	"  __local float FIBank[512];\n"
	"  __local float FRBank[512];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      unsigned int GlobalItr = Gidx >> 8;\n"
	"      unsigned int GlobalIndex = (Gidx & (256 - 1));\n"
	"      Gidx = GlobalItr * 512 + GlobalIndex;\n"
	"      float LeftReal = Rout[Gidx];\n"
	"      float LeftImag = 0;\n"
	"      float RightReal = Rout[Gidx + 256];\n"
	"      float RightImag = 0;\n"
	"      unsigned int LeftStoreIdx = i_itr * 2;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 1;\n"
	"      complex tw = twiddle(segmentK(i_itr, 1, 256), 512);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 256];\n"
	"      float RightImag = FIBank[i_itr + 256];\n"
	"      unsigned int segmentItr = i_itr >> 1;\n"
	"      unsigned int segmentIndex = (i_itr & (2 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 4 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 2;\n"
	"      complex tw = twiddle(segmentK(i_itr, 2, 256), 512);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 256];\n"
	"      float RightImag = SIBank[i_itr + 256];\n"
	"      unsigned int segmentItr = i_itr >> 2;\n"
	"      unsigned int segmentIndex = (i_itr & (4 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 8 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 4;\n"
	"      complex tw = twiddle(segmentK(i_itr, 4, 256), 512);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 256];\n"
	"      float RightImag = FIBank[i_itr + 256];\n"
	"      unsigned int segmentItr = i_itr >> 3;\n"
	"      unsigned int segmentIndex = (i_itr & (8 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 16 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 8;\n"
	"      complex tw = twiddle(segmentK(i_itr, 8, 256), 512);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 256];\n"
	"      float RightImag = SIBank[i_itr + 256];\n"
	"      unsigned int segmentItr = i_itr >> 4;\n"
	"      unsigned int segmentIndex = (i_itr & (16 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 32 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 16;\n"
	"      complex tw = twiddle(segmentK(i_itr, 16, 256), 512);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 256];\n"
	"      float RightImag = FIBank[i_itr + 256];\n"
	"      unsigned int segmentItr = i_itr >> 5;\n"
	"      unsigned int segmentIndex = (i_itr & (32 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 64 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 32;\n"
	"      complex tw = twiddle(segmentK(i_itr, 32, 256), 512);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 256];\n"
	"      float RightImag = SIBank[i_itr + 256];\n"
	"      unsigned int segmentItr = i_itr >> 6;\n"
	"      unsigned int segmentIndex = (i_itr & (64 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 128 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 64;\n"
	"      complex tw = twiddle(segmentK(i_itr, 64, 256), 512);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 256];\n"
	"      float RightImag = FIBank[i_itr + 256];\n"
	"      unsigned int segmentItr = i_itr >> 7;\n"
	"      unsigned int segmentIndex = (i_itr & (128 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 256 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 128;\n"
	"      complex tw = twiddle(segmentK(i_itr, 128, 256), 512);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      unsigned int GlobalItr = Gidx >> 8;\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 256];\n"
	"      float RightImag = SIBank[i_itr + 256];\n"
	"      unsigned int LeftStoreIdx = i_itr + GlobalItr * 512;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 256;\n"
	"      complex tw = twiddle(segmentK(i_itr, 256, 256), 512);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      Rout[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      Iout[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      Rout[RightStoreIdx] = LeftReal - RTwid;\n"
	"      Iout[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_preprocessed_ODW10_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global float * Rout,\n"
	"                                          __global float * Iout);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_preprocessed_ODW10_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global float * Rout,\n"
	"                                          __global float * Iout) {\n"
	"  __local float windowAdded[512];\n"
	"  __local float SIBank[1024];\n"
	"  __local float SRBank[1024];\n"
	"  __local float FIBank[1024];\n"
	"  __local float FRBank[1024];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (512 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int q_itr = o_itr >> 9;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 512;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FRBank[i_itr] = inData[idx] * isOverflowed;\n"
	"      FIBank[i_itr] = 0;\n"
	"      FRBank[i_itr + 512] = inData[Ridx] * RisOverflowed;\n"
	"      FIBank[i_itr + 512] = 0;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float Dpoint = FRBank[i_itr];\n"
	"      float Apoint = FRBank[i_itr + (512)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 256;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (256 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 128;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (128 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 64;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (64 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 32;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (32 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 16;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (16 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 8;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (8 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 4;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (4 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 2;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (2 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 1;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (1 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      FRBank[i_itr] -= (windowAdded[0] / 1024.0);\n"
	"      FRBank[i_itr] *= window_func(i_itr, 1024);\n"
	"      FRBank[i_itr + 512] -= (windowAdded[0] / 1024.0);\n"
	"      FRBank[i_itr + 512] *= window_func(i_itr + 512, 1024);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 512];\n"
	"      float RightImag = FIBank[i_itr + 512];\n"
	"      unsigned int segmentItr = i_itr >> 0;\n"
	"      unsigned int segmentIndex = (i_itr & (1 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 2 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 1;\n"
	"      complex tw = twiddle(segmentK(i_itr, 1, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 512];\n"
	"      float RightImag = SIBank[i_itr + 512];\n"
	"      unsigned int segmentItr = i_itr >> 1;\n"
	"      unsigned int segmentIndex = (i_itr & (2 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 4 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 2;\n"
	"      complex tw = twiddle(segmentK(i_itr, 2, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 512];\n"
	"      float RightImag = FIBank[i_itr + 512];\n"
	"      unsigned int segmentItr = i_itr >> 2;\n"
	"      unsigned int segmentIndex = (i_itr & (4 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 8 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 4;\n"
	"      complex tw = twiddle(segmentK(i_itr, 4, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 512];\n"
	"      float RightImag = SIBank[i_itr + 512];\n"
	"      unsigned int segmentItr = i_itr >> 3;\n"
	"      unsigned int segmentIndex = (i_itr & (8 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 16 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 8;\n"
	"      complex tw = twiddle(segmentK(i_itr, 8, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 512];\n"
	"      float RightImag = FIBank[i_itr + 512];\n"
	"      unsigned int segmentItr = i_itr >> 4;\n"
	"      unsigned int segmentIndex = (i_itr & (16 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 32 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 16;\n"
	"      complex tw = twiddle(segmentK(i_itr, 16, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 512];\n"
	"      float RightImag = SIBank[i_itr + 512];\n"
	"      unsigned int segmentItr = i_itr >> 5;\n"
	"      unsigned int segmentIndex = (i_itr & (32 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 64 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 32;\n"
	"      complex tw = twiddle(segmentK(i_itr, 32, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 512];\n"
	"      float RightImag = FIBank[i_itr + 512];\n"
	"      unsigned int segmentItr = i_itr >> 6;\n"
	"      unsigned int segmentIndex = (i_itr & (64 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 128 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 64;\n"
	"      complex tw = twiddle(segmentK(i_itr, 64, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 512];\n"
	"      float RightImag = SIBank[i_itr + 512];\n"
	"      unsigned int segmentItr = i_itr >> 7;\n"
	"      unsigned int segmentIndex = (i_itr & (128 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 256 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 128;\n"
	"      complex tw = twiddle(segmentK(i_itr, 128, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 512];\n"
	"      float RightImag = FIBank[i_itr + 512];\n"
	"      unsigned int segmentItr = i_itr >> 8;\n"
	"      unsigned int segmentIndex = (i_itr & (256 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 512 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 256;\n"
	"      complex tw = twiddle(segmentK(i_itr, 256, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      unsigned int GlobalItr = Gidx >> 9;\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 512];\n"
	"      float RightImag = SIBank[i_itr + 512];\n"
	"      unsigned int LeftStoreIdx = i_itr + GlobalItr * 1024;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 512;\n"
	"      complex tw = twiddle(segmentK(i_itr, 512, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      Rout[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      Iout[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      Rout[RightStoreIdx] = LeftReal - RTwid;\n"
	"      Iout[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_preprocesses_ODW_10_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global float * Rout);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_preprocesses_ODW_10_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global float * Rout) {\n"
	"  __local float windowAdded[512];\n"
	"  __local float wr[1024];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + get_group_id(0);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 512;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      wr[i_itr] = inData[idx] * isOverflowed;\n"
	"      wr[i_itr + 512] = inData[Ridx] * RisOverflowed;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 512;\n"
	"      float Dpoint = wr[i_itr];\n"
	"      float Apoint = wr[i_itr + (512 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 256;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (256 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 128;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (128 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 64;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (64 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 32;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (32 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 16;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (16 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 8;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (8 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 4;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (4 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 2;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (2 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 1;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (1 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      wr[i_itr] -= (windowAdded[0] / 1024.0);\n"
	"      wr[i_itr + 512] -= (windowAdded[0] / 1024.0);\n"
	"      wr[i_itr] *= window_func(i_itr, 1024);\n"
	"      wr[i_itr + 512] *= window_func(i_itr + 512, 1024);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      Rout[o_itr * 1024 + i_itr] = wr[i_itr];\n"
	"      Rout[o_itr * 1024 + i_itr + 512] = wr[i_itr + 512];\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_Stockhpotimized10_0(__global float * Rout,\n"
	"                                __global float * Iout,\n"
	"                                const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(512,1,1)))\n"
	" void _occa_Stockhpotimized10_0(__global float * Rout,\n"
	"                                __global float * Iout,\n"
	"                                const unsigned int OHalfSize) {\n"
	"  __local float SIBank[1024];\n"
	"  __local float SRBank[1024];\n"
	"  __local float FIBank[1024];\n"
	"  __local float FRBank[1024];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (512 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      unsigned int GlobalItr = Gidx >> 9;\n"
	"      unsigned int GlobalIndex = (Gidx & (512 - 1));\n"
	"      Gidx = GlobalItr * 1024 + GlobalIndex;\n"
	"      float LeftReal = Rout[Gidx];\n"
	"      float LeftImag = 0;\n"
	"      float RightReal = Rout[Gidx + 512];\n"
	"      float RightImag = 0;\n"
	"      unsigned int LeftStoreIdx = i_itr * 2;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 1;\n"
	"      complex tw = twiddle(segmentK(i_itr, 1, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 512];\n"
	"      float RightImag = FIBank[i_itr + 512];\n"
	"      unsigned int segmentItr = i_itr >> 1;\n"
	"      unsigned int segmentIndex = (i_itr & (2 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 4 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 2;\n"
	"      complex tw = twiddle(segmentK(i_itr, 2, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 512];\n"
	"      float RightImag = SIBank[i_itr + 512];\n"
	"      unsigned int segmentItr = i_itr >> 2;\n"
	"      unsigned int segmentIndex = (i_itr & (4 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 8 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 4;\n"
	"      complex tw = twiddle(segmentK(i_itr, 4, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 512];\n"
	"      float RightImag = FIBank[i_itr + 512];\n"
	"      unsigned int segmentItr = i_itr >> 3;\n"
	"      unsigned int segmentIndex = (i_itr & (8 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 16 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 8;\n"
	"      complex tw = twiddle(segmentK(i_itr, 8, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 512];\n"
	"      float RightImag = SIBank[i_itr + 512];\n"
	"      unsigned int segmentItr = i_itr >> 4;\n"
	"      unsigned int segmentIndex = (i_itr & (16 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 32 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 16;\n"
	"      complex tw = twiddle(segmentK(i_itr, 16, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 512];\n"
	"      float RightImag = FIBank[i_itr + 512];\n"
	"      unsigned int segmentItr = i_itr >> 5;\n"
	"      unsigned int segmentIndex = (i_itr & (32 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 64 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 32;\n"
	"      complex tw = twiddle(segmentK(i_itr, 32, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 512];\n"
	"      float RightImag = SIBank[i_itr + 512];\n"
	"      unsigned int segmentItr = i_itr >> 6;\n"
	"      unsigned int segmentIndex = (i_itr & (64 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 128 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 64;\n"
	"      complex tw = twiddle(segmentK(i_itr, 64, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 512];\n"
	"      float RightImag = FIBank[i_itr + 512];\n"
	"      unsigned int segmentItr = i_itr >> 7;\n"
	"      unsigned int segmentIndex = (i_itr & (128 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 256 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 128;\n"
	"      complex tw = twiddle(segmentK(i_itr, 128, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 512];\n"
	"      float RightImag = SIBank[i_itr + 512];\n"
	"      unsigned int segmentItr = i_itr >> 8;\n"
	"      unsigned int segmentIndex = (i_itr & (256 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 512 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 256;\n"
	"      complex tw = twiddle(segmentK(i_itr, 256, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      unsigned int GlobalItr = Gidx >> 9;\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 512];\n"
	"      float RightImag = FIBank[i_itr + 512];\n"
	"      unsigned int LeftStoreIdx = i_itr + GlobalItr * 1024;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 512;\n"
	"      complex tw = twiddle(segmentK(i_itr, 512, 512), 1024);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      Rout[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      Iout[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      Rout[RightStoreIdx] = LeftReal - RTwid;\n"
	"      Iout[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"\n"
	"// @kernel void Stockhpotimized10(\n"
	"//     float* Rout,\n"
	"//     float* Iout,\n"
	"//     const unsigned int OHalfSize)\n"
	"// {\n"
	"//     for(unsigned int o_itr = 0; o_itr < OHalfSize; o_itr += 512; @outer)\n"
	"//     {\n"
	"//         @shared float FRBank[1024];\n"
	"//         @shared float FIBank[1024];\n"
	"//         @shared float SRBank[1024];\n"
	"//         @shared float SIBank[1024];\n"
	"//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)\n"
	"//         {\n"
	"//             complex thisTwiddle = twiddle(segmentK(i_itr, 512, 512), 1024);\n"
	"//             complex LEFT;\n"
	"//             complex RIGHT;\n"
	"//             LEFT.real = Rout[o_itr * 2 + i_itr];\n"
	"//             LEFT.imag = Iout[o_itr * 2 + i_itr];\n"
	"//             RIGHT.real= Rout[o_itr * 2 + i_itr + 512];\n"
	"//             RIGHT.imag= Iout[o_itr * 2 + i_itr + 512];\n"
	"//             complex storeL = cadd(LEFT, RIGHT);\n"
	"//             complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"//             SRBank[i_itr] = storeL.real;\n"
	"//             SIBank[i_itr] = storeL.imag;\n"
	"//             SRBank[i_itr + 512] = storeR.real;\n"
	"//             SIBank[i_itr + 512] = storeR.imag;\n"
	"//         }\n"
	"\n"
	"//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)\n"
	"//         {\n"
	"//             OpSthmSecondTF(256, 255, 8, 9, 512, 1024);\n"
	"//         }\n"
	"\n"
	"//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)\n"
	"//         {\n"
	"//             OpSthmFirstTS(128, 127, 7, 8, 512, 1024)\n"
	"//         }\n"
	"\n"
	"//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)\n"
	"//         {\n"
	"//             OpSthmSecondTF(64, 63, 6, 7, 512, 1024)\n"
	"//         }\n"
	"//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)\n"
	"//         {\n"
	"//             OpSthmFirstTS(32, 31, 5, 6, 512, 1024)\n"
	"//         }\n"
	"//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)\n"
	"//         {\n"
	"//             OpSthmSecondTF(16, 15, 4, 5, 512, 1024)\n"
	"//         }\n"
	"//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)\n"
	"//         {\n"
	"//             OpSthmFirstTS(8, 7, 3, 4, 512, 1024)\n"
	"//         }\n"
	"//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)\n"
	"//         {\n"
	"//             OpSthmSecondTF(4, 3, 2, 3, 512, 1024)\n"
	"//         }\n"
	"//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)\n"
	"//         {\n"
	"//             OpSthmFirstTS(2, 1, 1, 2, 512, 1024)\n"
	"//         }\n"
	"//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)\n"
	"//         {\n"
	"//             complex thisTwiddle = twiddle(segmentK(i_itr, 1, 512), 1024);\n"
	"//             unsigned int LeftIndex =  (i_itr << 1);\n"
	"//             complex LEFT;\n"
	"//             complex RIGHT;\n"
	"//             LEFT.real = SRBank[LeftIndex];\n"
	"//             LEFT.imag = SIBank[LeftIndex];\n"
	"//             RIGHT.real= SRBank[LeftIndex + 1];\n"
	"//             RIGHT.imag= SIBank[LeftIndex + 1];\n"
	"//             complex storeL = cadd(LEFT, RIGHT);\n"
	"//             complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);\n"
	"\n"
	"//             Rout[o_itr * 2 + i_itr] = storeL.real;\n"
	"//             Iout[o_itr * 2 + i_itr] = storeL.imag;\n"
	"//             Rout[o_itr * 2 + i_itr + 512] = storeR.real;\n"
	"//             Iout[o_itr * 2 + i_itr + 512] = storeR.imag;\n"
	"//         }\n"
	"//     }\n"
	"// }\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_11_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global float * Rout);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocesses_ODW_11_0(__global float * inData,\n"
	"                                  const unsigned int qtConst,\n"
	"                                  const unsigned int fullSize,\n"
	"                                  const unsigned int OMove,\n"
	"                                  __global float * Rout) {\n"
	"  __local float windowAdded[1024];\n"
	"  __local float wr[2048];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + get_group_id(0);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int idx = o_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = o_itr * OMove + i_itr + 1024;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      wr[i_itr] = inData[idx] * isOverflowed;\n"
	"      wr[i_itr] = 0;\n"
	"      wr[i_itr + 1024] = inData[Ridx] * RisOverflowed;\n"
	"      wr[i_itr + 1024] = 0;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float Dpoint = wr[i_itr];\n"
	"      float Apoint = wr[i_itr + (1024)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 512;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (512 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 256;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (256 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 128;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (128 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 64;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (64 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 32;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (32 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 16;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (16 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 8;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (8 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 4;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (4 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 2;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (2 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 1;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (1 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      wr[i_itr] -= (windowAdded[0] / 2048.0);\n"
	"      wr[i_itr + 1024] -= (windowAdded[0] / 2048.0);\n"
	"      wr[i_itr] *= window_func(i_itr, 2048);\n"
	"      wr[i_itr + 1024] *= window_func(i_itr + 1024, 2048);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      Rout[o_itr * 2048 + i_itr] = wr[i_itr];\n"
	"      Rout[o_itr * 2048 + i_itr + 1024] = wr[i_itr + 1024];\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized11_0(__global float * Rout,\n"
	"                                __global float * Iout,\n"
	"                                const unsigned int OHalfSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_Stockhpotimized11_0(__global float * Rout,\n"
	"                                __global float * Iout,\n"
	"                                const unsigned int OHalfSize) {\n"
	"  __local float SIBank[2048];\n"
	"  __local float SRBank[2048];\n"
	"  __local float FIBank[2048];\n"
	"  __local float FRBank[2048];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (1024 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      unsigned int GlobalItr = Gidx >> 10;\n"
	"      unsigned int GlobalIndex = (Gidx & (1024 - 1));\n"
	"      Gidx = GlobalItr * 2048 + GlobalIndex;\n"
	"      float LeftReal = Rout[Gidx];\n"
	"      float LeftImag = 0;\n"
	"      float RightReal = Rout[Gidx + 1024];\n"
	"      float RightImag = 0;\n"
	"      unsigned int LeftStoreIdx = i_itr * 2;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 1;\n"
	"      complex tw = twiddle(segmentK(i_itr, 1, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 1024];\n"
	"      float RightImag = FIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 1;\n"
	"      unsigned int segmentIndex = (i_itr & (2 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 4 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 2;\n"
	"      complex tw = twiddle(segmentK(i_itr, 2, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 1024];\n"
	"      float RightImag = SIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 2;\n"
	"      unsigned int segmentIndex = (i_itr & (4 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 8 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 4;\n"
	"      complex tw = twiddle(segmentK(i_itr, 4, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 1024];\n"
	"      float RightImag = FIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 3;\n"
	"      unsigned int segmentIndex = (i_itr & (8 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 16 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 8;\n"
	"      complex tw = twiddle(segmentK(i_itr, 8, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 1024];\n"
	"      float RightImag = SIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 4;\n"
	"      unsigned int segmentIndex = (i_itr & (16 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 32 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 16;\n"
	"      complex tw = twiddle(segmentK(i_itr, 16, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 1024];\n"
	"      float RightImag = FIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 5;\n"
	"      unsigned int segmentIndex = (i_itr & (32 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 64 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 32;\n"
	"      complex tw = twiddle(segmentK(i_itr, 32, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 1024];\n"
	"      float RightImag = SIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 6;\n"
	"      unsigned int segmentIndex = (i_itr & (64 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 128 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 64;\n"
	"      complex tw = twiddle(segmentK(i_itr, 64, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 1024];\n"
	"      float RightImag = FIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 7;\n"
	"      unsigned int segmentIndex = (i_itr & (128 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 256 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 128;\n"
	"      complex tw = twiddle(segmentK(i_itr, 128, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 1024];\n"
	"      float RightImag = SIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 8;\n"
	"      unsigned int segmentIndex = (i_itr & (256 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 512 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 256;\n"
	"      complex tw = twiddle(segmentK(i_itr, 256, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 1024];\n"
	"      float RightImag = FIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 9;\n"
	"      unsigned int segmentIndex = (i_itr & (512 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 1024 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 512;\n"
	"      complex tw = twiddle(segmentK(i_itr, 512, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      unsigned int GlobalItr = Gidx >> 10;\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 1024];\n"
	"      float RightImag = SIBank[i_itr + 1024];\n"
	"      unsigned int LeftStoreIdx = i_itr + GlobalItr * 2048;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 1024;\n"
	"      complex tw = twiddle(segmentK(i_itr, 1024, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      Rout[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      Iout[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      Rout[RightStoreIdx] = LeftReal - RTwid;\n"
	"      Iout[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW11_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global float * Rout,\n"
	"                                          __global float * Iout);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(1024,1,1)))\n"
	" void _occa_preprocessed_ODW11_STH_STFT_0(__global float * inData,\n"
	"                                          const unsigned int qtConst,\n"
	"                                          const unsigned int fullSize,\n"
	"                                          const unsigned int OMove,\n"
	"                                          const unsigned int OHalfSize,\n"
	"                                          __global float * Rout,\n"
	"                                          __global float * Iout) {\n"
	"  __local float windowAdded[1024];\n"
	"  __local float SIBank[2048];\n"
	"  __local float SRBank[2048];\n"
	"  __local float FIBank[2048];\n"
	"  __local float FRBank[2048];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (1024 * get_group_id(0));\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int q_itr = o_itr >> 10;\n"
	"      unsigned int idx = q_itr * OMove + i_itr;\n"
	"      unsigned int Ridx = q_itr * OMove + i_itr + 1024;\n"
	"      int isOverflowed = (idx < fullSize);\n"
	"      int RisOverflowed = (Ridx < fullSize);\n"
	"      idx *= isOverflowed;\n"
	"      Ridx *= RisOverflowed;\n"
	"      FRBank[i_itr] = inData[idx] * isOverflowed;\n"
	"      FIBank[i_itr] = 0;\n"
	"      FRBank[i_itr + 1024] = inData[Ridx] * RisOverflowed;\n"
	"      FIBank[i_itr + 1024] = 0;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float Dpoint = FRBank[i_itr];\n"
	"      float Apoint = FRBank[i_itr + (1024)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 512;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (512 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 256;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (256 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 128;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (128 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 64;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (64 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 32;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (32 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 16;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (16 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 8;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (8 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 4;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (4 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 2;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (2 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int inRange = i_itr < 1;\n"
	"      float Dpoint = windowAdded[i_itr];\n"
	"      float Apoint = windowAdded[i_itr + (1 * inRange)];\n"
	"      windowAdded[i_itr] = (Dpoint + Apoint) * inRange;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      FRBank[i_itr] -= (windowAdded[0] / 2048.0);\n"
	"      FRBank[i_itr] *= window_func(i_itr, 2048);\n"
	"      FRBank[i_itr + 1024] -= (windowAdded[0] / 2048.0);\n"
	"      FRBank[i_itr + 1024] *= window_func(i_itr + 1024, 2048);\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 1024];\n"
	"      float RightImag = FIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 0;\n"
	"      unsigned int segmentIndex = (i_itr & (1 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 2 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 1;\n"
	"      complex tw = twiddle(segmentK(i_itr, 1, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 1024];\n"
	"      float RightImag = SIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 1;\n"
	"      unsigned int segmentIndex = (i_itr & (2 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 4 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 2;\n"
	"      complex tw = twiddle(segmentK(i_itr, 2, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 1024];\n"
	"      float RightImag = FIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 2;\n"
	"      unsigned int segmentIndex = (i_itr & (4 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 8 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 4;\n"
	"      complex tw = twiddle(segmentK(i_itr, 4, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 1024];\n"
	"      float RightImag = SIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 3;\n"
	"      unsigned int segmentIndex = (i_itr & (8 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 16 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 8;\n"
	"      complex tw = twiddle(segmentK(i_itr, 8, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 1024];\n"
	"      float RightImag = FIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 4;\n"
	"      unsigned int segmentIndex = (i_itr & (16 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 32 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 16;\n"
	"      complex tw = twiddle(segmentK(i_itr, 16, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 1024];\n"
	"      float RightImag = SIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 5;\n"
	"      unsigned int segmentIndex = (i_itr & (32 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 64 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 32;\n"
	"      complex tw = twiddle(segmentK(i_itr, 32, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 1024];\n"
	"      float RightImag = FIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 6;\n"
	"      unsigned int segmentIndex = (i_itr & (64 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 128 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 64;\n"
	"      complex tw = twiddle(segmentK(i_itr, 64, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 1024];\n"
	"      float RightImag = SIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 7;\n"
	"      unsigned int segmentIndex = (i_itr & (128 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 256 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 128;\n"
	"      complex tw = twiddle(segmentK(i_itr, 128, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 1024];\n"
	"      float RightImag = FIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 8;\n"
	"      unsigned int segmentIndex = (i_itr & (256 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 512 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 256;\n"
	"      complex tw = twiddle(segmentK(i_itr, 256, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      SRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      SIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      SRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      SIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      float LeftReal = SRBank[i_itr];\n"
	"      float LeftImag = SIBank[i_itr];\n"
	"      float RightReal = SRBank[i_itr + 1024];\n"
	"      float RightImag = SIBank[i_itr + 1024];\n"
	"      unsigned int segmentItr = i_itr >> 9;\n"
	"      unsigned int segmentIndex = (i_itr & (512 - 1));\n"
	"      unsigned int LeftStoreIdx = segmentItr * 1024 + segmentIndex;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 512;\n"
	"      complex tw = twiddle(segmentK(i_itr, 512, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      FRBank[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      FIBank[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      FRBank[RightStoreIdx] = LeftReal - RTwid;\n"
	"      FIBank[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    {\n"
	"      int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      unsigned int GlobalItr = Gidx >> 10;\n"
	"      float LeftReal = FRBank[i_itr];\n"
	"      float LeftImag = FIBank[i_itr];\n"
	"      float RightReal = FRBank[i_itr + 1024];\n"
	"      float RightImag = FIBank[i_itr + 1024];\n"
	"      unsigned int LeftStoreIdx = i_itr + GlobalItr * 2048;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + 1024;\n"
	"      complex tw = twiddle(segmentK(i_itr, 1024, 1024), 2048);\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      Rout[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      Iout[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      Rout[RightStoreIdx] = LeftReal - RTwid;\n"
	"      Iout[RightStoreIdx] = LeftImag - ITwid;\n"
	"      ;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Overlap_Common_0(__global float * inData,\n"
	"                             const unsigned int OFullSize,\n"
	"                             const unsigned int fullSize,\n"
	"                             const unsigned int windowRadix,\n"
	"                             const unsigned int OMove,\n"
	"                             __global float * outReal);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Overlap_Common_0(__global float * inData,\n"
	"                             const unsigned int OFullSize,\n"
	"                             const unsigned int fullSize,\n"
	"                             const unsigned int windowRadix,\n"
	"                             const unsigned int OMove,\n"
	"                             __global float * outReal) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (64 * get_group_id(0));\n"
	"    {\n"
	"      unsigned int i_itr = 0 + get_local_id(0);\n"
	"      const unsigned int overlapIdx = o_itr + i_itr;\n"
	"      const unsigned int windowIdx = (overlapIdx >> windowRadix);\n"
	"      const unsigned int windowLocalIdx = overlapIdx & ((1 << windowRadix) - 1);\n"
	"      const unsigned int originIdx = windowIdx * OMove + windowLocalIdx;\n"
	"      const unsigned int exceeded = originIdx < fullSize;\n"
	"      outReal[overlapIdx] = inData[originIdx * exceeded] * exceeded;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Window_Hanning_0(__global float * outReal,\n"
	"                             const unsigned int OFullSize,\n"
	"                             const unsigned int windowSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Window_Hanning_0(__global float * outReal,\n"
	"                             const unsigned int OFullSize,\n"
	"                             const unsigned int windowSize) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (64 * get_group_id(0));\n"
	"    {\n"
	"      unsigned int i_itr = 0 + get_local_id(0);\n"
	"      const unsigned int Gidx = o_itr + i_itr;\n"
	"      outReal[Gidx] *= hanning_window((Gidx & (windowSize - 1)), windowSize);\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Window_Hamming_0(__global float * outReal,\n"
	"                             const unsigned int OFullSize,\n"
	"                             const unsigned int windowSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Window_Hamming_0(__global float * outReal,\n"
	"                             const unsigned int OFullSize,\n"
	"                             const unsigned int windowSize) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (64 * get_group_id(0));\n"
	"    {\n"
	"      unsigned int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      outReal[Gidx] *= hamming_window((Gidx & (windowSize - 1)), windowSize);\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Window_Blackman_0(__global float * outReal,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const unsigned int windowSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Window_Blackman_0(__global float * outReal,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const unsigned int windowSize) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (64 * get_group_id(0));\n"
	"    {\n"
	"      unsigned int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      outReal[Gidx] *= blackman_window((Gidx & (windowSize - 1)), windowSize);\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Window_Nuttall_0(__global float * outReal,\n"
	"                             const unsigned int OFullSize,\n"
	"                             const unsigned int windowSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Window_Nuttall_0(__global float * outReal,\n"
	"                             const unsigned int OFullSize,\n"
	"                             const unsigned int windowSize) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (64 * get_group_id(0));\n"
	"    {\n"
	"      unsigned int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      outReal[Gidx] *= nuttall_window((Gidx & (windowSize - 1)), windowSize);\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Window_Blackman_Nuttall_0(__global float * outReal,\n"
	"                                      const unsigned int OFullSize,\n"
	"                                      const unsigned int windowSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Window_Blackman_Nuttall_0(__global float * outReal,\n"
	"                                      const unsigned int OFullSize,\n"
	"                                      const unsigned int windowSize) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (64 * get_group_id(0));\n"
	"    {\n"
	"      unsigned int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      outReal[Gidx] *= blackman_nuttall_window(\n"
	"        (Gidx & (windowSize - 1)),\n"
	"        windowSize\n"
	"      );\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Window_Blackman_harris_0(__global float * outReal,\n"
	"                                     const unsigned int OFullSize,\n"
	"                                     const unsigned int windowSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Window_Blackman_harris_0(__global float * outReal,\n"
	"                                     const unsigned int OFullSize,\n"
	"                                     const unsigned int windowSize) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (64 * get_group_id(0));\n"
	"    {\n"
	"      unsigned int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      outReal[Gidx] *= blackman_harris_window((Gidx & (windowSize - 1)), windowSize);\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Window_FlatTop_0(__global float * outReal,\n"
	"                             const unsigned int OFullSize,\n"
	"                             const unsigned int windowSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Window_FlatTop_0(__global float * outReal,\n"
	"                             const unsigned int OFullSize,\n"
	"                             const unsigned int windowSize) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (64 * get_group_id(0));\n"
	"    {\n"
	"      unsigned int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      outReal[Gidx] *= flatTop_window((Gidx & (windowSize - 1)), windowSize);\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Window_Gaussian_0(__global float * outReal,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const unsigned int windowSize,\n"
	"                              const float sigma);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_Window_Gaussian_0(__global float * outReal,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const unsigned int windowSize,\n"
	"                              const float sigma) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (64 * get_group_id(0));\n"
	"    {\n"
	"      unsigned int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int Gidx = o_itr + i_itr;\n"
	"      outReal[Gidx] *= gaussian_window((Gidx & (windowSize - 1)), windowSize, sigma);\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_DCRemove_Common_0(__global float * outReal,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const unsigned int windowSize);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(64,1,1)))\n"
	" void _occa_DCRemove_Common_0(__global float * outReal,\n"
	"                              const unsigned int OFullSize,\n"
	"                              const unsigned int windowSize) {\n"
	"  __local float added[128];\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (windowSize * get_group_id(0));\n"
	"    //for removing DC\n"
	"    {\n"
	"      unsigned int inititr = 0 + get_local_id(0);\n"
	"      added[inititr] = 0;\n"
	"    }\n"
	"    barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    for (unsigned int windowItr = 0; windowItr < windowSize; windowItr += 64) {\n"
	"      {\n"
	"        unsigned int i_itr = 0 + get_local_id(0);\n"
	"        added[i_itr + 64] = outReal[o_itr + windowItr + i_itr];\n"
	"      }\n"
	"      barrier(CLK_LOCAL_MEM_FENCE);\n"
	"      {\n"
	"        unsigned int i_itr = 0 + get_local_id(0);\n"
	"        added[i_itr] += added[i_itr + 64];\n"
	"      }\n"
	"      barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    }\n"
	"    for (unsigned int segment = 32; segment > 0; segment >>= 1) {\n"
	"      {\n"
	"        unsigned int i_itr = 0 + get_local_id(0);\n"
	"        unsigned int inSegment = i_itr < segment;\n"
	"        float left = added[i_itr];\n"
	"        float right = added[i_itr + segment];\n"
	"        added[i_itr] = (left + right) * inSegment;\n"
	"      }\n"
	"      barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    }\n"
	"    for (unsigned int windowItr = 0; windowItr < windowSize; windowItr += 64) {\n"
	"      {\n"
	"        unsigned int i_itr = 0 + get_local_id(0);\n"
	"        outReal[o_itr + windowItr + i_itr] -= (added[0] / (float) windowSize);\n"
	"      }\n"
	"      barrier(CLK_LOCAL_MEM_FENCE);\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_StockHamDITCommon_0(__global float * inReal,\n"
	"                                __global float * inImag,\n"
	"                                __global float * outReal,\n"
	"                                __global float * outImag,\n"
	"                                const unsigned int HwindowSize,\n"
	"                                const unsigned int stageRadix,\n"
	"                                const unsigned int OHalfSize,\n"
	"                                const unsigned int radixData);\n"
	"\n"
	"__kernel __attribute__((reqd_work_group_size(256,1,1)))\n"
	" void _occa_StockHamDITCommon_0(__global float * inReal,\n"
	"                                __global float * inImag,\n"
	"                                __global float * outReal,\n"
	"                                __global float * outImag,\n"
	"                                const unsigned int HwindowSize,\n"
	"                                const unsigned int stageRadix,\n"
	"                                const unsigned int OHalfSize,\n"
	"                                const unsigned int radixData) {\n"
	"  {\n"
	"    unsigned int o_itr = 0 + (256 * get_group_id(0));\n"
	"    {\n"
	"      unsigned int i_itr = 0 + get_local_id(0);\n"
	"      unsigned int OIdx = o_itr + i_itr;\n"
	"      unsigned int FwindowSize = HwindowSize << 1;\n"
	"      unsigned int GlobalItr = OIdx >> (radixData - 1);\n"
	"      unsigned int GlobalIndex = (OIdx & (HwindowSize - 1));\n"
	"      OIdx = GlobalItr * FwindowSize + GlobalIndex;\n"
	"      float LeftReal = inReal[OIdx];\n"
	"      float LeftImag = inImag[OIdx];\n"
	"      float RightReal = inReal[OIdx + HwindowSize];\n"
	"      float RightImag = inImag[OIdx + HwindowSize];\n"
	"      unsigned int segmentSize = 1 << stageRadix;\n"
	"      unsigned int segmentItr = GlobalIndex >> stageRadix;\n"
	"      unsigned int segmentIndex = (GlobalIndex & (segmentSize - 1));\n"
	"      //OIdx & (segmentSize - 1);\n"
	"      unsigned int LeftStoreIdx = segmentItr * (segmentSize << 1) + segmentIndex + GlobalItr * FwindowSize;\n"
	"      unsigned int RightStoreIdx = LeftStoreIdx + segmentSize;\n"
	"      complex tw = twiddle(\n"
	"        segmentK(OIdx, segmentSize, HwindowSize),\n"
	"        FwindowSize\n"
	"      );\n"
	"      float RTwid = RMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      float ITwid = IMult(RightReal, tw.real, RightImag, tw.imag);\n"
	"      outReal[LeftStoreIdx] = LeftReal + RTwid;\n"
	"      outImag[LeftStoreIdx] = LeftImag + ITwid;\n"
	"      outReal[RightStoreIdx] = LeftReal - RTwid;\n"
	"      outImag[RightStoreIdx] = LeftImag - ITwid;\n"
	"    }\n"
	"  }\n"
	"}\n"
	"\n"
	;

};