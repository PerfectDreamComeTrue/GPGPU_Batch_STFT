#ifndef ROOTISBASH  
#include "../include/kernel.okl"
#else
#include "./include/kernel.okl"
#endif


@kernel void preprocessed_ODW10_STH_STFT(
    float* inData,
    const unsigned int qtConst,
    const unsigned int fullSize,
    const unsigned int OMove,
    const unsigned int OHalfSize,
    float* Rout,
    float* Iout)
{
    for(unsigned int o_itr=0; o_itr < OHalfSize; o_itr += 512; @outer)
    {
        @shared float FRBank[1024];
        @shared float FIBank[1024];
        @shared float SRBank[1024];
        @shared float SIBank[1024];
        @shared float windowAdded[512];

        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)//overlap and extends
        {
            unsigned int q_itr = o_itr >> 9;
            unsigned int idx = q_itr * OMove + i_itr;
            unsigned int Ridx = q_itr * OMove + i_itr + 512;
            int isOverflowed = (idx < fullSize);
            int RisOverflowed= (Ridx< fullSize);
            idx *= isOverflowed;
            Ridx*=RisOverflowed;
            FRBank[i_itr] = inData[idx] * isOverflowed;
            FIBank[i_itr] = 0;
            FRBank[i_itr + 512] = inData[Ridx] * RisOverflowed;
            FIBank[i_itr + 512] = 0;
        }

        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)//removing DC
        {
            float Dpoint = FRBank[i_itr];
            float Apoint = FRBank[i_itr + (512)];
            windowAdded[i_itr] = (Dpoint + Apoint);
        }

        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 256, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 128, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 64, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 32, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 16, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 8, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 4, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 2, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 1, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            FRBank[i_itr] -= (windowAdded[0] / 1024.0);
            FRBank[i_itr] *= window_func(i_itr, 1024);
            FRBank[i_itr + 512] -= (windowAdded[0] / 1024.0);
            FRBank[i_itr + 512] *= window_func(i_itr + 512, 1024);
        }

        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            F2SDIT(1, 2, 0, 512, 1024);
        }

        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            S2FDIT(2, 4, 1, 512, 1024);
        }

        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            F2SDIT(4, 8, 2, 512, 1024);
        }

        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            S2FDIT(8, 16, 3, 512, 1024);
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            F2SDIT(16, 32, 4, 512, 1024);
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            S2FDIT(32, 64, 5, 512, 1024);
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            F2SDIT(64, 128, 6, 512, 1024);
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            S2FDIT(128, 256, 7, 512, 1024);
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            F2SDIT(256, 512, 8, 512, 1024);
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            S2GDIT(9, 512, 1024);
        }
    }
}


@kernel void preprocesses_ODW_10(
    float* inData,
    const unsigned int qtConst,
    const unsigned int fullSize,
    const unsigned int OMove,
    float* Rout)
{
    for(unsigned int o_itr=0; o_itr < qtConst; ++o_itr; @outer)
    {
        @shared float wr[1024];
        @shared float   windowAdded[512];
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)//overlap and extends
        {
            unsigned int idx = o_itr * OMove + i_itr;
            unsigned int Ridx = o_itr * OMove + i_itr + 512;
            int isOverflowed = (idx < fullSize);
            int RisOverflowed= (Ridx< fullSize);
            idx *= isOverflowed;
            Ridx*=RisOverflowed;
            wr[i_itr] = inData[idx] * isOverflowed;
            wr[i_itr + 512] = inData[Ridx] * RisOverflowed;
        }

        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)//removing DC
        {
            unsigned int inRange = i_itr < 512;
            float Dpoint = wr[i_itr];
            float Apoint = wr[i_itr + (512 * inRange)];
            windowAdded[i_itr] = (Dpoint + Apoint) * inRange;
        }

        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 256, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 128, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 64, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 32, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 16, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 8, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 4, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 2, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            DaCAdd(i_itr, 1, windowAdded);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            wr[i_itr] -= (windowAdded[0] / 1024.0);
            wr[i_itr + 512] -= (windowAdded[0] / 1024.0);
            wr[i_itr] *= window_func(i_itr, 1024);
            wr[i_itr + 512] *= window_func(i_itr + 512, 1024);
        }
        for(int i_itr=0; i_itr < 512; ++i_itr; @inner)
        {
            Rout[o_itr * 1024 + i_itr] = wr[i_itr];
            Rout[o_itr * 1024 + i_itr + 512] = wr[i_itr + 512];
        }
        
    }
}


@kernel void Stockhpotimized10(
    float* Rout, 
    float* Iout,
    const unsigned int OHalfSize)
{
    for(unsigned int o_itr = 0; o_itr < OHalfSize; o_itr += 512; @outer)
    {
        @shared float FRBank[1024];
        @shared float FIBank[1024];
        @shared float SRBank[1024];
        @shared float SIBank[1024];
        
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            G2FDIT(9, 512, 1024);
        }

        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            F2SDIT(2, 4, 1, 512, 1024);
        }

        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            S2FDIT(4, 8, 2, 512, 1024);
        }

        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            F2SDIT(8, 16, 3, 512, 1024);
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            S2FDIT(16, 32, 4, 512, 1024);
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            F2SDIT(32, 64, 5, 512, 1024);
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            S2FDIT(64, 128, 6, 512, 1024);
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            F2SDIT(128, 256, 7, 512, 1024);
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            S2FDIT(256, 512, 8, 512, 1024);
        }
        for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
        {
            F2GDIT(9, 512, 1024);
        }
    }
}


// @kernel void Stockhpotimized10(
//     float* Rout, 
//     float* Iout,
//     const unsigned int OHalfSize)
// {
//     for(unsigned int o_itr = 0; o_itr < OHalfSize; o_itr += 512; @outer)
//     {
//         @shared float FRBank[1024];
//         @shared float FIBank[1024];
//         @shared float SRBank[1024];
//         @shared float SIBank[1024];
        
//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
//         {
//             complex thisTwiddle = twiddle(segmentK(i_itr, 512, 512), 1024);
            
//             complex LEFT;
//             complex RIGHT;
//             LEFT.real = Rout[o_itr * 2 + i_itr];
//             LEFT.imag = Iout[o_itr * 2 + i_itr];
//             RIGHT.real= Rout[o_itr * 2 + i_itr + 512];
//             RIGHT.imag= Iout[o_itr * 2 + i_itr + 512];
//             complex storeL = cadd(LEFT, RIGHT);
//             complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);
//             SRBank[i_itr] = storeL.real;
//             SIBank[i_itr] = storeL.imag;
//             SRBank[i_itr + 512] = storeR.real;
//             SIBank[i_itr + 512] = storeR.imag;
//         }

//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
//         {
//             OpSthmSecondTF(256, 255, 8, 9, 512, 1024);
//         }

//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
//         {
//             OpSthmFirstTS(128, 127, 7, 8, 512, 1024)
//         }

//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
//         {
//             OpSthmSecondTF(64, 63, 6, 7, 512, 1024)
//         }
//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
//         {
//             OpSthmFirstTS(32, 31, 5, 6, 512, 1024)
//         }
//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
//         {
//             OpSthmSecondTF(16, 15, 4, 5, 512, 1024)
//         }
//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
//         {
//             OpSthmFirstTS(8, 7, 3, 4, 512, 1024)
//         }
//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
//         {
//             OpSthmSecondTF(4, 3, 2, 3, 512, 1024)
//         }
//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
//         {
//             OpSthmFirstTS(2, 1, 1, 2, 512, 1024)
//         }
//         for(int i_itr = 0; i_itr < 512; ++i_itr; @inner)
//         {
//             complex thisTwiddle = twiddle(segmentK(i_itr, 1, 512), 1024);
            
//             unsigned int LeftIndex =  (i_itr << 1);
            
//             complex LEFT;
//             complex RIGHT;
//             LEFT.real = SRBank[LeftIndex];
//             LEFT.imag = SIBank[LeftIndex];
//             RIGHT.real= SRBank[LeftIndex + 1];
//             RIGHT.imag= SIBank[LeftIndex + 1];
//             complex storeL = cadd(LEFT, RIGHT);
//             complex storeR = cmult(csub(LEFT, RIGHT), thisTwiddle);

//             Rout[o_itr * 2 + i_itr] = storeL.real;
//             Iout[o_itr * 2 + i_itr] = storeL.imag;
//             Rout[o_itr * 2 + i_itr + 512] = storeR.real;
//             Iout[o_itr * 2 + i_itr + 512] = storeR.imag;
//         }
//     }
// }